
IMU_without_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08003e8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003e8c  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b71d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be7  00000000  00000000  0002b7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a09  00000000  00000000  0002e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c189  00000000  00000000  00047f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092eeb  00000000  00000000  000540ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6fd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002388  00000000  00000000  000e7028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d68 	.word	0x08003d68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003d68 	.word	0x08003d68

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <delay>:
SPI_HandleTypeDef hspi2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void delay(volatile uint32_t count) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    while(count--);
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	1e5a      	subs	r2, r3, #1
 8000252:	607a      	str	r2, [r7, #4]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d1fa      	bne.n	800024e <delay+0xa>
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	46bd      	mov	sp, r7
 800025e:	b002      	add	sp, #8
 8000260:	bd80      	pop	{r7, pc}

08000262 <SPI_WriteReadByte>:

uint8_t SPI_WriteReadByte(SPI_HandleTypeDef *hspi, uint8_t data) {
 8000262:	b590      	push	{r4, r7, lr}
 8000264:	b087      	sub	sp, #28
 8000266:	af02      	add	r7, sp, #8
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	000a      	movs	r2, r1
 800026c:	1cfb      	adds	r3, r7, #3
 800026e:	701a      	strb	r2, [r3, #0]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(hspi, &data, &rx_data, 1, 100);
 8000270:	240f      	movs	r4, #15
 8000272:	193a      	adds	r2, r7, r4
 8000274:	1cf9      	adds	r1, r7, #3
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	2364      	movs	r3, #100	; 0x64
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2301      	movs	r3, #1
 800027e:	f001 fd7f 	bl	8001d80 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	781b      	ldrb	r3, [r3, #0]
}
 8000286:	0018      	movs	r0, r3
 8000288:	46bd      	mov	sp, r7
 800028a:	b005      	add	sp, #20
 800028c:	bd90      	pop	{r4, r7, pc}

0800028e <L3GD20_Init>:

void L3GD20_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_GPIO_Port, uint16_t CS_Pin) {
 800028e:	b590      	push	{r4, r7, lr}
 8000290:	b087      	sub	sp, #28
 8000292:	af00      	add	r7, sp, #0
 8000294:	60f8      	str	r0, [r7, #12]
 8000296:	60b9      	str	r1, [r7, #8]
 8000298:	1dbb      	adds	r3, r7, #6
 800029a:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800029c:	1dbb      	adds	r3, r7, #6
 800029e:	8819      	ldrh	r1, [r3, #0]
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	2200      	movs	r2, #0
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fea5 	bl	8000ff4 <HAL_GPIO_WritePin>
    delay(1000);
 80002aa:	23fa      	movs	r3, #250	; 0xfa
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	0018      	movs	r0, r3
 80002b0:	f7ff ffc8 	bl	8000244 <delay>

    uint8_t ctrl1 = 0x0F;
 80002b4:	2417      	movs	r4, #23
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	220f      	movs	r2, #15
 80002ba:	701a      	strb	r2, [r3, #0]
    SPI_WriteReadByte(hspi, 0x20);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2120      	movs	r1, #32
 80002c0:	0018      	movs	r0, r3
 80002c2:	f7ff ffce 	bl	8000262 <SPI_WriteReadByte>
    SPI_WriteReadByte(hspi, ctrl1);
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f7ff ffc7 	bl	8000262 <SPI_WriteReadByte>

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80002d4:	1dbb      	adds	r3, r7, #6
 80002d6:	8819      	ldrh	r1, [r3, #0]
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	2201      	movs	r2, #1
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fe89 	bl	8000ff4 <HAL_GPIO_WritePin>
    delay(1000);
 80002e2:	23fa      	movs	r3, #250	; 0xfa
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f7ff ffac 	bl	8000244 <delay>
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b007      	add	sp, #28
 80002f2:	bd90      	pop	{r4, r7, pc}

080002f4 <L3GD20_ReadGyro>:

void L3GD20_ReadGyro(SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_GPIO_Port, uint16_t CS_Pin, int16_t *gx, int16_t *gy, int16_t *gz) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	1dbb      	adds	r3, r7, #6
 8000302:	801a      	strh	r2, [r3, #0]
    uint8_t raw_data[6];

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000304:	1dbb      	adds	r3, r7, #6
 8000306:	8819      	ldrh	r1, [r3, #0]
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2200      	movs	r2, #0
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fe71 	bl	8000ff4 <HAL_GPIO_WritePin>
    delay(1000);
 8000312:	23fa      	movs	r3, #250	; 0xfa
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff ff94 	bl	8000244 <delay>

    SPI_WriteReadByte(hspi, 0x80 | 0x28);
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	21a8      	movs	r1, #168	; 0xa8
 8000320:	0018      	movs	r0, r3
 8000322:	f7ff ff9e 	bl	8000262 <SPI_WriteReadByte>
    for(int i = 0; i < 6; i++) {
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
 800032a:	e00f      	b.n	800034c <L3GD20_ReadGyro+0x58>
        raw_data[i] = SPI_WriteReadByte(hspi, 0x00);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	2100      	movs	r1, #0
 8000330:	0018      	movs	r0, r3
 8000332:	f7ff ff96 	bl	8000262 <SPI_WriteReadByte>
 8000336:	0003      	movs	r3, r0
 8000338:	0019      	movs	r1, r3
 800033a:	2314      	movs	r3, #20
 800033c:	18fa      	adds	r2, r7, r3
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	18d3      	adds	r3, r2, r3
 8000342:	1c0a      	adds	r2, r1, #0
 8000344:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 6; i++) {
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3301      	adds	r3, #1
 800034a:	61fb      	str	r3, [r7, #28]
 800034c:	69fb      	ldr	r3, [r7, #28]
 800034e:	2b05      	cmp	r3, #5
 8000350:	ddec      	ble.n	800032c <L3GD20_ReadGyro+0x38>
    }

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000352:	1dbb      	adds	r3, r7, #6
 8000354:	8819      	ldrh	r1, [r3, #0]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2201      	movs	r2, #1
 800035a:	0018      	movs	r0, r3
 800035c:	f000 fe4a 	bl	8000ff4 <HAL_GPIO_WritePin>
    delay(1000);
 8000360:	23fa      	movs	r3, #250	; 0xfa
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	0018      	movs	r0, r3
 8000366:	f7ff ff6d 	bl	8000244 <delay>

    *gx = (int16_t)(raw_data[1] << 8 | raw_data[0]);
 800036a:	2114      	movs	r1, #20
 800036c:	187b      	adds	r3, r7, r1
 800036e:	785b      	ldrb	r3, [r3, #1]
 8000370:	021b      	lsls	r3, r3, #8
 8000372:	b21a      	sxth	r2, r3
 8000374:	187b      	adds	r3, r7, r1
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b21b      	sxth	r3, r3
 800037a:	4313      	orrs	r3, r2
 800037c:	b21a      	sxth	r2, r3
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)(raw_data[3] << 8 | raw_data[2]);
 8000382:	187b      	adds	r3, r7, r1
 8000384:	78db      	ldrb	r3, [r3, #3]
 8000386:	021b      	lsls	r3, r3, #8
 8000388:	b21a      	sxth	r2, r3
 800038a:	187b      	adds	r3, r7, r1
 800038c:	789b      	ldrb	r3, [r3, #2]
 800038e:	b21b      	sxth	r3, r3
 8000390:	4313      	orrs	r3, r2
 8000392:	b21a      	sxth	r2, r3
 8000394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000396:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)(raw_data[5] << 8 | raw_data[4]);
 8000398:	187b      	adds	r3, r7, r1
 800039a:	795b      	ldrb	r3, [r3, #5]
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	b21a      	sxth	r2, r3
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	791b      	ldrb	r3, [r3, #4]
 80003a4:	b21b      	sxth	r3, r3
 80003a6:	4313      	orrs	r3, r2
 80003a8:	b21a      	sxth	r2, r3
 80003aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ac:	801a      	strh	r2, [r3, #0]
}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b008      	add	sp, #32
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ba:	b095      	sub	sp, #84	; 0x54
 80003bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003be:	f000 fabd 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c2:	f000 f847 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 f90b 	bl	80005e0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80003ca:	f000 f89b 	bl	8000504 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80003ce:	f000 f8d7 	bl	8000580 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  L3GD20_Init(&hspi2, GPIOC, GPIO_PIN_0);
 80003d2:	491c      	ldr	r1, [pc, #112]	; (8000444 <main+0x8c>)
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <main+0x90>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	0018      	movs	r0, r3
 80003da:	f7ff ff58 	bl	800028e <L3GD20_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int16_t gx, gy, gz;
	      L3GD20_ReadGyro(&hspi2, GPIOC, GPIO_PIN_0, &gx, &gy, &gz);
 80003de:	2446      	movs	r4, #70	; 0x46
 80003e0:	193a      	adds	r2, r7, r4
 80003e2:	4918      	ldr	r1, [pc, #96]	; (8000444 <main+0x8c>)
 80003e4:	4818      	ldr	r0, [pc, #96]	; (8000448 <main+0x90>)
 80003e6:	2542      	movs	r5, #66	; 0x42
 80003e8:	197b      	adds	r3, r7, r5
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	2644      	movs	r6, #68	; 0x44
 80003ee:	19bb      	adds	r3, r7, r6
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	0013      	movs	r3, r2
 80003f4:	2201      	movs	r2, #1
 80003f6:	f7ff ff7d 	bl	80002f4 <L3GD20_ReadGyro>

	      char buffer[64];
	      snprintf(buffer, sizeof(buffer), "Gyro X: %d, Gyro Y: %d, Gyro Z: %d\r\n", gx, gy, gz);
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	2200      	movs	r2, #0
 80003fe:	5e9b      	ldrsh	r3, [r3, r2]
 8000400:	001c      	movs	r4, r3
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	2200      	movs	r2, #0
 8000406:	5e9b      	ldrsh	r3, [r3, r2]
 8000408:	0019      	movs	r1, r3
 800040a:	197b      	adds	r3, r7, r5
 800040c:	2200      	movs	r2, #0
 800040e:	5e9b      	ldrsh	r3, [r3, r2]
 8000410:	4a0e      	ldr	r2, [pc, #56]	; (800044c <main+0x94>)
 8000412:	0038      	movs	r0, r7
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	9100      	str	r1, [sp, #0]
 8000418:	0023      	movs	r3, r4
 800041a:	2140      	movs	r1, #64	; 0x40
 800041c:	f003 f826 	bl	800346c <sniprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
 8000420:	003b      	movs	r3, r7
 8000422:	0018      	movs	r0, r3
 8000424:	f7ff fe70 	bl	8000108 <strlen>
 8000428:	0003      	movs	r3, r0
 800042a:	b29a      	uxth	r2, r3
 800042c:	0039      	movs	r1, r7
 800042e:	4808      	ldr	r0, [pc, #32]	; (8000450 <main+0x98>)
 8000430:	2364      	movs	r3, #100	; 0x64
 8000432:	f002 f851 	bl	80024d8 <HAL_UART_Transmit>

	      HAL_Delay(500); // Delay to reduce the data update rate
 8000436:	23fa      	movs	r3, #250	; 0xfa
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fae2 	bl	8000a04 <HAL_Delay>
  {
 8000440:	e7cd      	b.n	80003de <main+0x26>
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	48000800 	.word	0x48000800
 8000448:	2000008c 	.word	0x2000008c
 800044c:	08003d80 	.word	0x08003d80
 8000450:	200000f0 	.word	0x200000f0

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b099      	sub	sp, #100	; 0x64
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	242c      	movs	r4, #44	; 0x2c
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2334      	movs	r3, #52	; 0x34
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fff9 	bl	800345c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046a:	231c      	movs	r3, #28
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	0018      	movs	r0, r3
 8000470:	2310      	movs	r3, #16
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f002 fff1 	bl	800345c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047a:	003b      	movs	r3, r7
 800047c:	0018      	movs	r0, r3
 800047e:	231c      	movs	r3, #28
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f002 ffea 	bl	800345c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000488:	0021      	movs	r1, r4
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2202      	movs	r2, #2
 800048e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2201      	movs	r2, #1
 8000494:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2210      	movs	r2, #16
 800049a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fdc3 	bl	8001030 <HAL_RCC_OscConfig>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ae:	f000 f8ed 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	211c      	movs	r1, #28
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2207      	movs	r2, #7
 80004b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2100      	movs	r1, #0
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 f933 	bl	800173c <HAL_RCC_ClockConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004da:	f000 f8d7 	bl	800068c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2201      	movs	r2, #1
 80004e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 fa91 	bl	8001a14 <HAL_RCCEx_PeriphCLKConfig>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80004f6:	f000 f8c9 	bl	800068c <Error_Handler>
  }
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b019      	add	sp, #100	; 0x64
 8000500:	bd90      	pop	{r4, r7, pc}
	...

08000504 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_SPI2_Init+0x74>)
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <MX_SPI2_Init+0x78>)
 800050c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_SPI2_Init+0x74>)
 8000510:	2282      	movs	r2, #130	; 0x82
 8000512:	0052      	lsls	r2, r2, #1
 8000514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_SPI2_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_SPI2_Init+0x74>)
 800051e:	22e0      	movs	r2, #224	; 0xe0
 8000520:	00d2      	lsls	r2, r2, #3
 8000522:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_SPI2_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_SPI2_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_SPI2_Init+0x74>)
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	0092      	lsls	r2, r2, #2
 8000536:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_SPI2_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_SPI2_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_SPI2_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <MX_SPI2_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_SPI2_Init+0x74>)
 8000552:	2207      	movs	r2, #7
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_SPI2_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_SPI2_Init+0x74>)
 800055e:	2208      	movs	r2, #8
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MX_SPI2_Init+0x74>)
 8000564:	0018      	movs	r0, r3
 8000566:	f001 fb53 	bl	8001c10 <HAL_SPI_Init>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800056e:	f000 f88d 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000008c 	.word	0x2000008c
 800057c:	40003800 	.word	0x40003800

08000580 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <MX_USART1_UART_Init+0x5c>)
 8000588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 800058c:	22e1      	movs	r2, #225	; 0xe1
 800058e:	0252      	lsls	r2, r2, #9
 8000590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 ff33 	bl	8002430 <HAL_UART_Init>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005ce:	f000 f85d 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000f0 	.word	0x200000f0
 80005dc:	40013800 	.word	0x40013800

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b089      	sub	sp, #36	; 0x24
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	240c      	movs	r4, #12
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f002 ff33 	bl	800345c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xa4>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <MX_GPIO_Init+0xa4>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0309      	lsls	r1, r1, #12
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	031b      	lsls	r3, r3, #12
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	02c9      	lsls	r1, r1, #11
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	02db      	lsls	r3, r3, #11
 8000628:	4013      	ands	r3, r2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_GPIO_Init+0xa4>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0289      	lsls	r1, r1, #10
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_GPIO_Init+0xa4>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	029b      	lsls	r3, r3, #10
 8000644:	4013      	ands	r3, r2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_GPIO_Init+0xa8>)
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fccf 	bl	8000ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000656:	0021      	movs	r1, r4
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2201      	movs	r2, #1
 8000662:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000670:	187b      	adds	r3, r7, r1
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <MX_GPIO_Init+0xa8>)
 8000674:	0019      	movs	r1, r3
 8000676:	0010      	movs	r0, r2
 8000678:	f000 fb44 	bl	8000d04 <HAL_GPIO_Init>

}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b009      	add	sp, #36	; 0x24
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	40021000 	.word	0x40021000
 8000688:	48000800 	.word	0x48000800

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x44>)
 80006a0:	699a      	ldr	r2, [r3, #24]
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_MspInit+0x44>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	619a      	str	r2, [r3, #24]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x44>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_MspInit+0x44>)
 80006b8:	69da      	ldr	r2, [r3, #28]
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_MspInit+0x44>)
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	0549      	lsls	r1, r1, #21
 80006c0:	430a      	orrs	r2, r1
 80006c2:	61da      	str	r2, [r3, #28]
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_MspInit+0x44>)
 80006c6:	69da      	ldr	r2, [r3, #28]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	055b      	lsls	r3, r3, #21
 80006cc:	4013      	ands	r3, r2
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	40021000 	.word	0x40021000

080006e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b08b      	sub	sp, #44	; 0x2c
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	2414      	movs	r4, #20
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	0018      	movs	r0, r3
 80006ee:	2314      	movs	r3, #20
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f002 feb2 	bl	800345c <memset>
  if(hspi->Instance==SPI2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <HAL_SPI_MspInit+0x90>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d132      	bne.n	8000768 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_SPI_MspInit+0x94>)
 8000704:	69da      	ldr	r2, [r3, #28]
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_SPI_MspInit+0x94>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	01c9      	lsls	r1, r1, #7
 800070c:	430a      	orrs	r2, r1
 800070e:	61da      	str	r2, [r3, #28]
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_SPI_MspInit+0x94>)
 8000712:	69da      	ldr	r2, [r3, #28]
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	01db      	lsls	r3, r3, #7
 8000718:	4013      	ands	r3, r2
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_SPI_MspInit+0x94>)
 8000720:	695a      	ldr	r2, [r3, #20]
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_SPI_MspInit+0x94>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	02c9      	lsls	r1, r1, #11
 8000728:	430a      	orrs	r2, r1
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <HAL_SPI_MspInit+0x94>)
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	02db      	lsls	r3, r3, #11
 8000734:	4013      	ands	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	22e0      	movs	r2, #224	; 0xe0
 800073e:	0212      	lsls	r2, r2, #8
 8000740:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	0021      	movs	r1, r4
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2202      	movs	r2, #2
 8000748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2203      	movs	r2, #3
 8000754:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	187b      	adds	r3, r7, r1
 800075e:	4a06      	ldr	r2, [pc, #24]	; (8000778 <HAL_SPI_MspInit+0x98>)
 8000760:	0019      	movs	r1, r3
 8000762:	0010      	movs	r0, r2
 8000764:	f000 face 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b00b      	add	sp, #44	; 0x2c
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	40003800 	.word	0x40003800
 8000774:	40021000 	.word	0x40021000
 8000778:	48000400 	.word	0x48000400

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b08b      	sub	sp, #44	; 0x2c
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	2414      	movs	r4, #20
 8000786:	193b      	adds	r3, r7, r4
 8000788:	0018      	movs	r0, r3
 800078a:	2314      	movs	r3, #20
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f002 fe64 	bl	800345c <memset>
  if(huart->Instance==USART1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a21      	ldr	r2, [pc, #132]	; (8000820 <HAL_UART_MspInit+0xa4>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d13b      	bne.n	8000816 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <HAL_UART_MspInit+0xa8>)
 80007a0:	699a      	ldr	r2, [r3, #24]
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <HAL_UART_MspInit+0xa8>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	01c9      	lsls	r1, r1, #7
 80007a8:	430a      	orrs	r2, r1
 80007aa:	619a      	str	r2, [r3, #24]
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <HAL_UART_MspInit+0xa8>)
 80007ae:	699a      	ldr	r2, [r3, #24]
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	01db      	lsls	r3, r3, #7
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <HAL_UART_MspInit+0xa8>)
 80007bc:	695a      	ldr	r2, [r3, #20]
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <HAL_UART_MspInit+0xa8>)
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0289      	lsls	r1, r1, #10
 80007c4:	430a      	orrs	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_UART_MspInit+0xa8>)
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	029b      	lsls	r3, r3, #10
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	22c0      	movs	r2, #192	; 0xc0
 80007da:	00d2      	lsls	r2, r2, #3
 80007dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	0021      	movs	r1, r4
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2202      	movs	r2, #2
 80007e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2203      	movs	r2, #3
 80007f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2201      	movs	r2, #1
 80007f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	187a      	adds	r2, r7, r1
 80007fa:	2390      	movs	r3, #144	; 0x90
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fa7f 	bl	8000d04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	201b      	movs	r0, #27
 800080c:	f000 f9ca 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000810:	201b      	movs	r0, #27
 8000812:	f000 f9dc 	bl	8000bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b00b      	add	sp, #44	; 0x2c
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40013800 	.word	0x40013800
 8000824:	40021000 	.word	0x40021000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 f8be 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <USART1_IRQHandler+0x14>)
 800085e:	0018      	movs	r0, r3
 8000860:	f001 feda 	bl	8002618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	200000f0 	.word	0x200000f0

08000870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <_sbrk+0x5c>)
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <_sbrk+0x60>)
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <_sbrk+0x64>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <_sbrk+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	429a      	cmp	r2, r3
 800089e:	d207      	bcs.n	80008b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a0:	f002 fdb2 	bl	8003408 <__errno>
 80008a4:	0003      	movs	r3, r0
 80008a6:	220c      	movs	r2, #12
 80008a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	425b      	negs	r3, r3
 80008ae:	e009      	b.n	80008c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	18d2      	adds	r2, r2, r3
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <_sbrk+0x64>)
 80008c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b006      	add	sp, #24
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20004000 	.word	0x20004000
 80008d0:	00000400 	.word	0x00000400
 80008d4:	20000178 	.word	0x20000178
 80008d8:	20000190 	.word	0x20000190

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ec:	f7ff fff6 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000916:	f002 fd7d 	bl	8003414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091a:	f7ff fd4d 	bl	80003b8 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   r0, =_estack
 8000920:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800092c:	08003e1c 	.word	0x08003e1c
  ldr r2, =_sbss
 8000930:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000934:	20000190 	.word	0x20000190

08000938 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_COMP_IRQHandler>
	...

0800093c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <HAL_Init+0x24>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_Init+0x24>)
 8000946:	2110      	movs	r1, #16
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f809 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000952:	f7ff fea1 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_InitTick+0x5c>)
 800096e:	681c      	ldr	r4, [r3, #0]
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_InitTick+0x60>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	0019      	movs	r1, r3
 8000976:	23fa      	movs	r3, #250	; 0xfa
 8000978:	0098      	lsls	r0, r3, #2
 800097a:	f7ff fbd7 	bl	800012c <__udivsi3>
 800097e:	0003      	movs	r3, r0
 8000980:	0019      	movs	r1, r3
 8000982:	0020      	movs	r0, r4
 8000984:	f7ff fbd2 	bl	800012c <__udivsi3>
 8000988:	0003      	movs	r3, r0
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f92f 	bl	8000bee <HAL_SYSTICK_Config>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	e00f      	b.n	80009b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d80b      	bhi.n	80009b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	2301      	movs	r3, #1
 80009a2:	425b      	negs	r3, r3
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f8fc 	bl	8000ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_InitTick+0x64>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b003      	add	sp, #12
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	001a      	movs	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	18d2      	adds	r2, r2, r3
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_IncTick+0x20>)
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	20000008 	.word	0x20000008
 80009ec:	2000017c 	.word	0x2000017c

080009f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	2000017c 	.word	0x2000017c

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff fff0 	bl	80009f0 <HAL_GetTick>
 8000a10:	0003      	movs	r3, r0
 8000a12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_Delay+0x44>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	001a      	movs	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	189b      	adds	r3, r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	f7ff ffe0 	bl	80009f0 <HAL_GetTick>
 8000a30:	0002      	movs	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b004      	add	sp, #16
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	20000008 	.word	0x20000008

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	0002      	movs	r2, r0
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a5e:	d809      	bhi.n	8000a74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	001a      	movs	r2, r3
 8000a66:	231f      	movs	r3, #31
 8000a68:	401a      	ands	r2, r3
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_EnableIRQ+0x30>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4091      	lsls	r1, r2
 8000a70:	000a      	movs	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
  }
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	0002      	movs	r2, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b7f      	cmp	r3, #127	; 0x7f
 8000a94:	d828      	bhi.n	8000ae8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	33c0      	adds	r3, #192	; 0xc0
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	589b      	ldr	r3, [r3, r2]
 8000aa6:	1dfa      	adds	r2, r7, #7
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	0011      	movs	r1, r2
 8000aac:	2203      	movs	r2, #3
 8000aae:	400a      	ands	r2, r1
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	21ff      	movs	r1, #255	; 0xff
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	401a      	ands	r2, r3
 8000abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	22ff      	movs	r2, #255	; 0xff
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	2303      	movs	r3, #3
 8000ace:	4003      	ands	r3, r0
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	481f      	ldr	r0, [pc, #124]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	33c0      	adds	r3, #192	; 0xc0
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae6:	e031      	b.n	8000b4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0019      	movs	r1, r3
 8000af0:	230f      	movs	r3, #15
 8000af2:	400b      	ands	r3, r1
 8000af4:	3b08      	subs	r3, #8
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3306      	adds	r3, #6
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	3304      	adds	r3, #4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1dfa      	adds	r2, r7, #7
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	0011      	movs	r1, r2
 8000b08:	2203      	movs	r2, #3
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	00d2      	lsls	r2, r2, #3
 8000b0e:	21ff      	movs	r1, #255	; 0xff
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	43d2      	mvns	r2, r2
 8000b16:	401a      	ands	r2, r3
 8000b18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	401a      	ands	r2, r3
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	2303      	movs	r3, #3
 8000b2a:	4003      	ands	r3, r0
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001c      	movs	r4, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	4023      	ands	r3, r4
 8000b3c:	3b08      	subs	r3, #8
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	430a      	orrs	r2, r1
 8000b42:	3306      	adds	r3, #6
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	18c3      	adds	r3, r0, r3
 8000b48:	3304      	adds	r3, #4
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b003      	add	sp, #12
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	045b      	lsls	r3, r3, #17
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d301      	bcc.n	8000b74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b70:	2301      	movs	r3, #1
 8000b72:	e010      	b.n	8000b96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <SysTick_Config+0x44>)
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	3a01      	subs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	425b      	negs	r3, r3
 8000b80:	2103      	movs	r1, #3
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff ff7c 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x44>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x44>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	210f      	movs	r1, #15
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	1c02      	adds	r2, r0, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ff33 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ffaf 	bl	8000b5c <SysTick_Config>
 8000bfe:	0003      	movs	r3, r0
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2221      	movs	r2, #33	; 0x21
 8000c14:	5c9b      	ldrb	r3, [r3, r2]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d008      	beq.n	8000c2e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2204      	movs	r2, #4
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2220      	movs	r2, #32
 8000c26:	2100      	movs	r1, #0
 8000c28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e020      	b.n	8000c70 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	210e      	movs	r1, #14
 8000c3a:	438a      	bics	r2, r1
 8000c3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	438a      	bics	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c56:	2101      	movs	r1, #1
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2221      	movs	r2, #33	; 0x21
 8000c62:	2101      	movs	r1, #1
 8000c64:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2220      	movs	r2, #32
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c80:	210f      	movs	r1, #15
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2221      	movs	r2, #33	; 0x21
 8000c8c:	5c9b      	ldrb	r3, [r3, r2]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d006      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2204      	movs	r2, #4
 8000c98:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e028      	b.n	8000cf4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	210e      	movs	r1, #14
 8000cae:	438a      	bics	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	438a      	bics	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	000a      	movs	r2, r1
 8000cd0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2221      	movs	r2, #33	; 0x21
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2100      	movs	r1, #0
 8000ce0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d004      	beq.n	8000cf4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	0010      	movs	r0, r2
 8000cf2:	4798      	blx	r3
    }
  }
  return status;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	781b      	ldrb	r3, [r3, #0]
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b004      	add	sp, #16
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e155      	b.n	8000fc0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	000a      	movs	r2, r1
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <HAL_GPIO_Init+0x28>
 8000d2a:	e146      	b.n	8000fba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2203      	movs	r2, #3
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d005      	beq.n	8000d44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d130      	bne.n	8000da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	409a      	lsls	r2, r3
 8000d52:	0013      	movs	r3, r2
 8000d54:	43da      	mvns	r2, r3
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	43da      	mvns	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	2201      	movs	r2, #1
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2203      	movs	r2, #3
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d017      	beq.n	8000de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2203      	movs	r2, #3
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d123      	bne.n	8000e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	58d3      	ldr	r3, [r2, r3]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2207      	movs	r2, #7
 8000e00:	4013      	ands	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2107      	movs	r1, #7
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	0092      	lsls	r2, r2, #2
 8000e32:	6939      	ldr	r1, [r7, #16]
 8000e34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2203      	movs	r2, #3
 8000e54:	401a      	ands	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	23c0      	movs	r3, #192	; 0xc0
 8000e70:	029b      	lsls	r3, r3, #10
 8000e72:	4013      	ands	r3, r2
 8000e74:	d100      	bne.n	8000e78 <HAL_GPIO_Init+0x174>
 8000e76:	e0a0      	b.n	8000fba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	4b57      	ldr	r3, [pc, #348]	; (8000fd8 <HAL_GPIO_Init+0x2d4>)
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	4b56      	ldr	r3, [pc, #344]	; (8000fd8 <HAL_GPIO_Init+0x2d4>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	430a      	orrs	r2, r1
 8000e82:	619a      	str	r2, [r3, #24]
 8000e84:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <HAL_GPIO_Init+0x2d4>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e90:	4a52      	ldr	r2, [pc, #328]	; (8000fdc <HAL_GPIO_Init+0x2d8>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	589b      	ldr	r3, [r3, r2]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	0013      	movs	r3, r2
 8000eac:	43da      	mvns	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	2390      	movs	r3, #144	; 0x90
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <HAL_GPIO_Init+0x2dc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x1ea>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a46      	ldr	r2, [pc, #280]	; (8000fe4 <HAL_GPIO_Init+0x2e0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x1e6>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a45      	ldr	r2, [pc, #276]	; (8000fe8 <HAL_GPIO_Init+0x2e4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x1e2>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a44      	ldr	r2, [pc, #272]	; (8000fec <HAL_GPIO_Init+0x2e8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x1de>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e008      	b.n	8000ef4 <HAL_GPIO_Init+0x1f0>
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x1f0>
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e004      	b.n	8000ef4 <HAL_GPIO_Init+0x1f0>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_Init+0x1f0>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x1f0>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	400a      	ands	r2, r1
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	4093      	lsls	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f04:	4935      	ldr	r1, [pc, #212]	; (8000fdc <HAL_GPIO_Init+0x2d8>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	035b      	lsls	r3, r3, #13
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43da      	mvns	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	039b      	lsls	r3, r3, #14
 8000f54:	4013      	ands	r3, r2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	029b      	lsls	r3, r3, #10
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43da      	mvns	r2, r3
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	40da      	lsrs	r2, r3
 8000fc8:	1e13      	subs	r3, r2, #0
 8000fca:	d000      	beq.n	8000fce <HAL_GPIO_Init+0x2ca>
 8000fcc:	e6a2      	b.n	8000d14 <HAL_GPIO_Init+0x10>
  } 
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b006      	add	sp, #24
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	48000400 	.word	0x48000400
 8000fe4:	48000800 	.word	0x48000800
 8000fe8:	48000c00 	.word	0x48000c00
 8000fec:	48001000 	.word	0x48001000
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	0008      	movs	r0, r1
 8000ffe:	0011      	movs	r1, r2
 8001000:	1cbb      	adds	r3, r7, #2
 8001002:	1c02      	adds	r2, r0, #0
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	1c7b      	adds	r3, r7, #1
 8001008:	1c0a      	adds	r2, r1, #0
 800100a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800100c:	1c7b      	adds	r3, r7, #1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001014:	1cbb      	adds	r3, r7, #2
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800101c:	e003      	b.n	8001026 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800101e:	1cbb      	adds	r3, r7, #2
 8001020:	881a      	ldrh	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	f000 fb76 	bl	8001730 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2201      	movs	r2, #1
 800104a:	4013      	ands	r3, r2
 800104c:	d100      	bne.n	8001050 <HAL_RCC_OscConfig+0x20>
 800104e:	e08e      	b.n	800116e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001050:	4bc5      	ldr	r3, [pc, #788]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	220c      	movs	r2, #12
 8001056:	4013      	ands	r3, r2
 8001058:	2b04      	cmp	r3, #4
 800105a:	d00e      	beq.n	800107a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800105c:	4bc2      	ldr	r3, [pc, #776]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	220c      	movs	r2, #12
 8001062:	4013      	ands	r3, r2
 8001064:	2b08      	cmp	r3, #8
 8001066:	d117      	bne.n	8001098 <HAL_RCC_OscConfig+0x68>
 8001068:	4bbf      	ldr	r3, [pc, #764]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	401a      	ands	r2, r3
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	025b      	lsls	r3, r3, #9
 8001076:	429a      	cmp	r2, r3
 8001078:	d10e      	bne.n	8001098 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107a:	4bbb      	ldr	r3, [pc, #748]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	029b      	lsls	r3, r3, #10
 8001082:	4013      	ands	r3, r2
 8001084:	d100      	bne.n	8001088 <HAL_RCC_OscConfig+0x58>
 8001086:	e071      	b.n	800116c <HAL_RCC_OscConfig+0x13c>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d000      	beq.n	8001092 <HAL_RCC_OscConfig+0x62>
 8001090:	e06c      	b.n	800116c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	f000 fb4c 	bl	8001730 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d107      	bne.n	80010b0 <HAL_RCC_OscConfig+0x80>
 80010a0:	4bb1      	ldr	r3, [pc, #708]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4bb0      	ldr	r3, [pc, #704]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	0249      	lsls	r1, r1, #9
 80010aa:	430a      	orrs	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e02f      	b.n	8001110 <HAL_RCC_OscConfig+0xe0>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10c      	bne.n	80010d2 <HAL_RCC_OscConfig+0xa2>
 80010b8:	4bab      	ldr	r3, [pc, #684]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4baa      	ldr	r3, [pc, #680]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010be:	49ab      	ldr	r1, [pc, #684]	; (800136c <HAL_RCC_OscConfig+0x33c>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4ba8      	ldr	r3, [pc, #672]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4ba7      	ldr	r3, [pc, #668]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010ca:	49a9      	ldr	r1, [pc, #676]	; (8001370 <HAL_RCC_OscConfig+0x340>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e01e      	b.n	8001110 <HAL_RCC_OscConfig+0xe0>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d10e      	bne.n	80010f8 <HAL_RCC_OscConfig+0xc8>
 80010da:	4ba3      	ldr	r3, [pc, #652]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4ba2      	ldr	r3, [pc, #648]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	02c9      	lsls	r1, r1, #11
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	4b9f      	ldr	r3, [pc, #636]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b9e      	ldr	r3, [pc, #632]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0xe0>
 80010f8:	4b9b      	ldr	r3, [pc, #620]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b9a      	ldr	r3, [pc, #616]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80010fe:	499b      	ldr	r1, [pc, #620]	; (800136c <HAL_RCC_OscConfig+0x33c>)
 8001100:	400a      	ands	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	4b98      	ldr	r3, [pc, #608]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b97      	ldr	r3, [pc, #604]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800110a:	4999      	ldr	r1, [pc, #612]	; (8001370 <HAL_RCC_OscConfig+0x340>)
 800110c:	400a      	ands	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d014      	beq.n	8001142 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fc6a 	bl	80009f0 <HAL_GetTick>
 800111c:	0003      	movs	r3, r0
 800111e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001122:	f7ff fc65 	bl	80009f0 <HAL_GetTick>
 8001126:	0002      	movs	r2, r0
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b64      	cmp	r3, #100	; 0x64
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e2fd      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001134:	4b8c      	ldr	r3, [pc, #560]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	029b      	lsls	r3, r3, #10
 800113c:	4013      	ands	r3, r2
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0xf2>
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001142:	f7ff fc55 	bl	80009f0 <HAL_GetTick>
 8001146:	0003      	movs	r3, r0
 8001148:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fc50 	bl	80009f0 <HAL_GetTick>
 8001150:	0002      	movs	r2, r0
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	; 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e2e8      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	4b82      	ldr	r3, [pc, #520]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	029b      	lsls	r3, r3, #10
 8001166:	4013      	ands	r3, r2
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x11c>
 800116a:	e000      	b.n	800116e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2202      	movs	r2, #2
 8001174:	4013      	ands	r3, r2
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x14a>
 8001178:	e06c      	b.n	8001254 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800117a:	4b7b      	ldr	r3, [pc, #492]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	220c      	movs	r2, #12
 8001180:	4013      	ands	r3, r2
 8001182:	d00e      	beq.n	80011a2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001184:	4b78      	ldr	r3, [pc, #480]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	220c      	movs	r2, #12
 800118a:	4013      	ands	r3, r2
 800118c:	2b08      	cmp	r3, #8
 800118e:	d11f      	bne.n	80011d0 <HAL_RCC_OscConfig+0x1a0>
 8001190:	4b75      	ldr	r3, [pc, #468]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	23c0      	movs	r3, #192	; 0xc0
 8001196:	025b      	lsls	r3, r3, #9
 8001198:	401a      	ands	r2, r3
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	429a      	cmp	r2, r3
 80011a0:	d116      	bne.n	80011d0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	4b71      	ldr	r3, [pc, #452]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2202      	movs	r2, #2
 80011a8:	4013      	ands	r3, r2
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_OscConfig+0x188>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d001      	beq.n	80011b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e2bb      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b8:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	22f8      	movs	r2, #248	; 0xf8
 80011be:	4393      	bics	r3, r2
 80011c0:	0019      	movs	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00da      	lsls	r2, r3, #3
 80011c8:	4b67      	ldr	r3, [pc, #412]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80011ca:	430a      	orrs	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	e041      	b.n	8001254 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d024      	beq.n	8001222 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d8:	4b63      	ldr	r3, [pc, #396]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b62      	ldr	r3, [pc, #392]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80011de:	2101      	movs	r1, #1
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc04 	bl	80009f0 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fbff 	bl	80009f0 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e297      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b59      	ldr	r3, [pc, #356]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2202      	movs	r2, #2
 8001206:	4013      	ands	r3, r2
 8001208:	d0f1      	beq.n	80011ee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120a:	4b57      	ldr	r3, [pc, #348]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	22f8      	movs	r2, #248	; 0xf8
 8001210:	4393      	bics	r3, r2
 8001212:	0019      	movs	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	00da      	lsls	r2, r3, #3
 800121a:	4b53      	ldr	r3, [pc, #332]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e018      	b.n	8001254 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b51      	ldr	r3, [pc, #324]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b50      	ldr	r3, [pc, #320]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001228:	2101      	movs	r1, #1
 800122a:	438a      	bics	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fbdf 	bl	80009f0 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fbda 	bl	80009f0 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e272      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	4b47      	ldr	r3, [pc, #284]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	d1f1      	bne.n	8001238 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2208      	movs	r2, #8
 800125a:	4013      	ands	r3, r2
 800125c:	d036      	beq.n	80012cc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d019      	beq.n	800129a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001266:	4b40      	ldr	r3, [pc, #256]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126a:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800126c:	2101      	movs	r1, #1
 800126e:	430a      	orrs	r2, r1
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001272:	f7ff fbbd 	bl	80009f0 <HAL_GetTick>
 8001276:	0003      	movs	r3, r0
 8001278:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fbb8 	bl	80009f0 <HAL_GetTick>
 8001280:	0002      	movs	r2, r0
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e250      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	2202      	movs	r2, #2
 8001294:	4013      	ands	r3, r2
 8001296:	d0f1      	beq.n	800127c <HAL_RCC_OscConfig+0x24c>
 8001298:	e018      	b.n	80012cc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800129c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80012a0:	2101      	movs	r1, #1
 80012a2:	438a      	bics	r2, r1
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fba3 	bl	80009f0 <HAL_GetTick>
 80012aa:	0003      	movs	r3, r0
 80012ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fb9e 	bl	80009f0 <HAL_GetTick>
 80012b4:	0002      	movs	r2, r0
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e236      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	2202      	movs	r2, #2
 80012c8:	4013      	ands	r3, r2
 80012ca:	d1f1      	bne.n	80012b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2204      	movs	r2, #4
 80012d2:	4013      	ands	r3, r2
 80012d4:	d100      	bne.n	80012d8 <HAL_RCC_OscConfig+0x2a8>
 80012d6:	e0b5      	b.n	8001444 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d8:	201f      	movs	r0, #31
 80012da:	183b      	adds	r3, r7, r0
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80012e2:	69da      	ldr	r2, [r3, #28]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	055b      	lsls	r3, r3, #21
 80012e8:	4013      	ands	r3, r2
 80012ea:	d110      	bne.n	800130e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80012ee:	69da      	ldr	r2, [r3, #28]
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	0549      	lsls	r1, r1, #21
 80012f6:	430a      	orrs	r2, r1
 80012f8:	61da      	str	r2, [r3, #28]
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	055b      	lsls	r3, r3, #21
 8001302:	4013      	ands	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001308:	183b      	adds	r3, r7, r0
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_RCC_OscConfig+0x344>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4013      	ands	r3, r2
 8001318:	d11a      	bne.n	8001350 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_RCC_OscConfig+0x344>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_RCC_OscConfig+0x344>)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0049      	lsls	r1, r1, #1
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001328:	f7ff fb62 	bl	80009f0 <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001332:	f7ff fb5d 	bl	80009f0 <HAL_GetTick>
 8001336:	0002      	movs	r2, r0
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b64      	cmp	r3, #100	; 0x64
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e1f5      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x344>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4013      	ands	r3, r2
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d10f      	bne.n	8001378 <HAL_RCC_OscConfig+0x348>
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800135a:	6a1a      	ldr	r2, [r3, #32]
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_RCC_OscConfig+0x338>)
 800135e:	2101      	movs	r1, #1
 8001360:	430a      	orrs	r2, r1
 8001362:	621a      	str	r2, [r3, #32]
 8001364:	e036      	b.n	80013d4 <HAL_RCC_OscConfig+0x3a4>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40021000 	.word	0x40021000
 800136c:	fffeffff 	.word	0xfffeffff
 8001370:	fffbffff 	.word	0xfffbffff
 8001374:	40007000 	.word	0x40007000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x36a>
 8001380:	4bca      	ldr	r3, [pc, #808]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	4bc9      	ldr	r3, [pc, #804]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001386:	2101      	movs	r1, #1
 8001388:	438a      	bics	r2, r1
 800138a:	621a      	str	r2, [r3, #32]
 800138c:	4bc7      	ldr	r3, [pc, #796]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	4bc6      	ldr	r3, [pc, #792]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001392:	2104      	movs	r1, #4
 8001394:	438a      	bics	r2, r1
 8001396:	621a      	str	r2, [r3, #32]
 8001398:	e01c      	b.n	80013d4 <HAL_RCC_OscConfig+0x3a4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x38c>
 80013a2:	4bc2      	ldr	r3, [pc, #776]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	4bc1      	ldr	r3, [pc, #772]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80013a8:	2104      	movs	r1, #4
 80013aa:	430a      	orrs	r2, r1
 80013ac:	621a      	str	r2, [r3, #32]
 80013ae:	4bbf      	ldr	r3, [pc, #764]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	4bbe      	ldr	r3, [pc, #760]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	621a      	str	r2, [r3, #32]
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0x3a4>
 80013bc:	4bbb      	ldr	r3, [pc, #748]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	4bba      	ldr	r3, [pc, #744]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	438a      	bics	r2, r1
 80013c6:	621a      	str	r2, [r3, #32]
 80013c8:	4bb8      	ldr	r3, [pc, #736]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4bb7      	ldr	r3, [pc, #732]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80013ce:	2104      	movs	r1, #4
 80013d0:	438a      	bics	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d014      	beq.n	8001406 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fb08 	bl	80009f0 <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	e009      	b.n	80013fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fb03 	bl	80009f0 <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	4aaf      	ldr	r2, [pc, #700]	; (80016b0 <HAL_RCC_OscConfig+0x680>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e19a      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	4bac      	ldr	r3, [pc, #688]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x3b6>
 8001404:	e013      	b.n	800142e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff faf3 	bl	80009f0 <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	e009      	b.n	8001424 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001410:	f7ff faee 	bl	80009f0 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	4aa5      	ldr	r2, [pc, #660]	; (80016b0 <HAL_RCC_OscConfig+0x680>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e185      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001424:	4ba1      	ldr	r3, [pc, #644]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	2202      	movs	r2, #2
 800142a:	4013      	ands	r3, r2
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800142e:	231f      	movs	r3, #31
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001438:	4b9c      	ldr	r3, [pc, #624]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	4b9b      	ldr	r3, [pc, #620]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800143e:	499d      	ldr	r1, [pc, #628]	; (80016b4 <HAL_RCC_OscConfig+0x684>)
 8001440:	400a      	ands	r2, r1
 8001442:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2210      	movs	r2, #16
 800144a:	4013      	ands	r3, r2
 800144c:	d063      	beq.n	8001516 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d12a      	bne.n	80014ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001456:	4b95      	ldr	r3, [pc, #596]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145a:	4b94      	ldr	r3, [pc, #592]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800145c:	2104      	movs	r1, #4
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001462:	4b92      	ldr	r3, [pc, #584]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001466:	4b91      	ldr	r3, [pc, #580]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fabf 	bl	80009f0 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001478:	f7ff faba 	bl	80009f0 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e152      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800148a:	4b88      	ldr	r3, [pc, #544]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d0f1      	beq.n	8001478 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001494:	4b85      	ldr	r3, [pc, #532]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001498:	22f8      	movs	r2, #248	; 0xf8
 800149a:	4393      	bics	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	00da      	lsls	r2, r3, #3
 80014a4:	4b81      	ldr	r3, [pc, #516]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
 80014aa:	e034      	b.n	8001516 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	3305      	adds	r3, #5
 80014b2:	d111      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014b4:	4b7d      	ldr	r3, [pc, #500]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80014b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b8:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80014ba:	2104      	movs	r1, #4
 80014bc:	438a      	bics	r2, r1
 80014be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014c0:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80014c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c4:	22f8      	movs	r2, #248	; 0xf8
 80014c6:	4393      	bics	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	00da      	lsls	r2, r3, #3
 80014d0:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80014d2:	430a      	orrs	r2, r1
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
 80014d6:	e01e      	b.n	8001516 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014d8:	4b74      	ldr	r3, [pc, #464]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80014da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014dc:	4b73      	ldr	r3, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80014de:	2104      	movs	r1, #4
 80014e0:	430a      	orrs	r2, r1
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014e4:	4b71      	ldr	r3, [pc, #452]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80014e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e8:	4b70      	ldr	r3, [pc, #448]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff fa7e 	bl	80009f0 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014fa:	f7ff fa79 	bl	80009f0 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e111      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800150c:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800150e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f1      	bne.n	80014fa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2220      	movs	r2, #32
 800151c:	4013      	ands	r3, r2
 800151e:	d05c      	beq.n	80015da <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001520:	4b62      	ldr	r3, [pc, #392]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	220c      	movs	r2, #12
 8001526:	4013      	ands	r3, r2
 8001528:	2b0c      	cmp	r3, #12
 800152a:	d00e      	beq.n	800154a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800152c:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	220c      	movs	r2, #12
 8001532:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001534:	2b08      	cmp	r3, #8
 8001536:	d114      	bne.n	8001562 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001538:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	23c0      	movs	r3, #192	; 0xc0
 800153e:	025b      	lsls	r3, r3, #9
 8001540:	401a      	ands	r2, r3
 8001542:	23c0      	movs	r3, #192	; 0xc0
 8001544:	025b      	lsls	r3, r3, #9
 8001546:	429a      	cmp	r2, r3
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800154a:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800154c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	029b      	lsls	r3, r3, #10
 8001552:	4013      	ands	r3, r2
 8001554:	d040      	beq.n	80015d8 <HAL_RCC_OscConfig+0x5a8>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d03c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0e6      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01b      	beq.n	80015a2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800156a:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800156c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156e:	4b4f      	ldr	r3, [pc, #316]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	0249      	lsls	r1, r1, #9
 8001574:	430a      	orrs	r2, r1
 8001576:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fa3a 	bl	80009f0 <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001582:	f7ff fa35 	bl	80009f0 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0cd      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001594:	4b45      	ldr	r3, [pc, #276]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	4013      	ands	r3, r2
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x552>
 80015a0:	e01b      	b.n	80015da <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015a2:	4b42      	ldr	r3, [pc, #264]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80015a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80015a8:	4943      	ldr	r1, [pc, #268]	; (80016b8 <HAL_RCC_OscConfig+0x688>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fa1f 	bl	80009f0 <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015b8:	f7ff fa1a 	bl	80009f0 <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0b2      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80015cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	029b      	lsls	r3, r3, #10
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x588>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015d8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d100      	bne.n	80015e4 <HAL_RCC_OscConfig+0x5b4>
 80015e2:	e0a4      	b.n	800172e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	220c      	movs	r2, #12
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d100      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5c2>
 80015f0:	e078      	b.n	80016e4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d14c      	bne.n	8001694 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001600:	492e      	ldr	r1, [pc, #184]	; (80016bc <HAL_RCC_OscConfig+0x68c>)
 8001602:	400a      	ands	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff f9f3 	bl	80009f0 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff f9ee 	bl	80009f0 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e086      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	049b      	lsls	r3, r3, #18
 800162a:	4013      	ands	r3, r2
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	220f      	movs	r2, #15
 8001634:	4393      	bics	r3, r2
 8001636:	0019      	movs	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800163e:	430a      	orrs	r2, r1
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <HAL_RCC_OscConfig+0x690>)
 8001648:	4013      	ands	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	431a      	orrs	r2, r3
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0449      	lsls	r1, r1, #17
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff f9c1 	bl	80009f0 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f9bc 	bl	80009f0 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e054      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	049b      	lsls	r3, r3, #18
 800168e:	4013      	ands	r3, r2
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x644>
 8001692:	e04c      	b.n	800172e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_RCC_OscConfig+0x67c>)
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <HAL_RCC_OscConfig+0x68c>)
 800169c:	400a      	ands	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff f9a6 	bl	80009f0 <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x6a6>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40021000 	.word	0x40021000
 80016b0:	00001388 	.word	0x00001388
 80016b4:	efffffff 	.word	0xefffffff
 80016b8:	fffeffff 	.word	0xfffeffff
 80016bc:	feffffff 	.word	0xfeffffff
 80016c0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff f994 	bl	80009f0 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e02c      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_RCC_OscConfig+0x708>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	049b      	lsls	r3, r3, #18
 80016de:	4013      	ands	r3, r2
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x694>
 80016e2:	e024      	b.n	800172e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e01f      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x708>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_RCC_OscConfig+0x708>)
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	23c0      	movs	r3, #192	; 0xc0
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	401a      	ands	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	429a      	cmp	r2, r3
 800170a:	d10e      	bne.n	800172a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	220f      	movs	r2, #15
 8001710:	401a      	ands	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d107      	bne.n	800172a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	23f0      	movs	r3, #240	; 0xf0
 800171e:	039b      	lsls	r3, r3, #14
 8001720:	401a      	ands	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b008      	add	sp, #32
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0bf      	b.n	80018d0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <HAL_RCC_ClockConfig+0x19c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d911      	bls.n	8001782 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b5e      	ldr	r3, [pc, #376]	; (80018d8 <HAL_RCC_ClockConfig+0x19c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4393      	bics	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <HAL_RCC_ClockConfig+0x19c>)
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_RCC_ClockConfig+0x19c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0a6      	b.n	80018d0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	d015      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2204      	movs	r2, #4
 8001792:	4013      	ands	r3, r2
 8001794:	d006      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001796:	4b51      	ldr	r3, [pc, #324]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 800179c:	21e0      	movs	r1, #224	; 0xe0
 800179e:	00c9      	lsls	r1, r1, #3
 80017a0:	430a      	orrs	r2, r1
 80017a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b4d      	ldr	r3, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	22f0      	movs	r2, #240	; 0xf0
 80017aa:	4393      	bics	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 80017b4:	430a      	orrs	r2, r1
 80017b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	d04c      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	4013      	ands	r3, r2
 80017d4:	d120      	bne.n	8001818 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07a      	b.n	80018d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	049b      	lsls	r3, r3, #18
 80017ea:	4013      	ands	r3, r2
 80017ec:	d114      	bne.n	8001818 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06e      	b.n	80018d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 80017fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	029b      	lsls	r3, r3, #10
 8001802:	4013      	ands	r3, r2
 8001804:	d108      	bne.n	8001818 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e062      	b.n	80018d0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b34      	ldr	r3, [pc, #208]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e05b      	b.n	80018d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	4393      	bics	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff f8e0 	bl	80009f0 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001834:	e009      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001836:	f7ff f8db 	bl	80009f0 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <HAL_RCC_ClockConfig+0x1a4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e042      	b.n	80018d0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	220c      	movs	r2, #12
 8001850:	401a      	ands	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1ec      	bne.n	8001836 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_RCC_ClockConfig+0x19c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d211      	bcs.n	800188e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_RCC_ClockConfig+0x19c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2201      	movs	r2, #1
 8001870:	4393      	bics	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_RCC_ClockConfig+0x19c>)
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_RCC_ClockConfig+0x19c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	4013      	ands	r3, r2
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e020      	b.n	80018d0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2204      	movs	r2, #4
 8001894:	4013      	ands	r3, r2
 8001896:	d009      	beq.n	80018ac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_RCC_ClockConfig+0x1a8>)
 800189e:	4013      	ands	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018ac:	f000 f820 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018b0:	0001      	movs	r1, r0
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1a0>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	220f      	movs	r2, #15
 80018ba:	4013      	ands	r3, r2
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1ac>)
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	000a      	movs	r2, r1
 80018c2:	40da      	lsrs	r2, r3
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1b0>)
 80018c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f7ff f84b 	bl	8000964 <HAL_InitTick>
  
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b004      	add	sp, #16
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	00001388 	.word	0x00001388
 80018e4:	fffff8ff 	.word	0xfffff8ff
 80018e8:	08003da8 	.word	0x08003da8
 80018ec:	20000000 	.word	0x20000000

080018f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	220c      	movs	r2, #12
 8001914:	4013      	ands	r3, r2
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d046      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0xb8>
 800191a:	d848      	bhi.n	80019ae <HAL_RCC_GetSysClockFreq+0xbe>
 800191c:	2b04      	cmp	r3, #4
 800191e:	d002      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x36>
 8001920:	2b08      	cmp	r3, #8
 8001922:	d003      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x3c>
 8001924:	e043      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001928:	613b      	str	r3, [r7, #16]
      break;
 800192a:	e043      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	0c9b      	lsrs	r3, r3, #18
 8001930:	220f      	movs	r2, #15
 8001932:	4013      	ands	r3, r2
 8001934:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	220f      	movs	r2, #15
 8001940:	4013      	ands	r3, r2
 8001942:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_RCC_GetSysClockFreq+0xdc>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	23c0      	movs	r3, #192	; 0xc0
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	401a      	ands	r2, r3
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	429a      	cmp	r2, r3
 8001956:	d109      	bne.n	800196c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	481a      	ldr	r0, [pc, #104]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800195c:	f7fe fbe6 	bl	800012c <__udivsi3>
 8001960:	0003      	movs	r3, r0
 8001962:	001a      	movs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4353      	muls	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e01a      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	401a      	ands	r2, r3
 8001974:	23c0      	movs	r3, #192	; 0xc0
 8001976:	025b      	lsls	r3, r3, #9
 8001978:	429a      	cmp	r2, r3
 800197a:	d109      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	4814      	ldr	r0, [pc, #80]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001980:	f7fe fbd4 	bl	800012c <__udivsi3>
 8001984:	0003      	movs	r3, r0
 8001986:	001a      	movs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4353      	muls	r3, r2
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e008      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	480c      	ldr	r0, [pc, #48]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001994:	f7fe fbca 	bl	800012c <__udivsi3>
 8001998:	0003      	movs	r3, r0
 800199a:	001a      	movs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4353      	muls	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	613b      	str	r3, [r7, #16]
      break;
 80019a6:	e005      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xe0>)
 80019aa:	613b      	str	r3, [r7, #16]
      break;
 80019ac:	e002      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80019b0:	613b      	str	r3, [r7, #16]
      break;
 80019b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019b4:	693b      	ldr	r3, [r7, #16]
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b006      	add	sp, #24
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	40021000 	.word	0x40021000
 80019c4:	007a1200 	.word	0x007a1200
 80019c8:	08003dc0 	.word	0x08003dc0
 80019cc:	08003dd0 	.word	0x08003dd0
 80019d0:	02dc6c00 	.word	0x02dc6c00

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	20000000 	.word	0x20000000

080019e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019ec:	f7ff fff2 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f0:	0001      	movs	r1, r0
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	2207      	movs	r2, #7
 80019fa:	4013      	ands	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	40d9      	lsrs	r1, r3
 8001a02:	000b      	movs	r3, r1
}    
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08003db8 	.word	0x08003db8

08001a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a30:	e08e      	b.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a32:	2017      	movs	r0, #23
 8001a34:	183b      	adds	r3, r7, r0
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3a:	4b6e      	ldr	r3, [pc, #440]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a3c:	69da      	ldr	r2, [r3, #28]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	055b      	lsls	r3, r3, #21
 8001a42:	4013      	ands	r3, r2
 8001a44:	d110      	bne.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	0549      	lsls	r1, r1, #21
 8001a50:	430a      	orrs	r2, r1
 8001a52:	61da      	str	r2, [r3, #28]
 8001a54:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a56:	69da      	ldr	r2, [r3, #28]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	055b      	lsls	r3, r3, #21
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a62:	183b      	adds	r3, r7, r0
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d11a      	bne.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a74:	4b60      	ldr	r3, [pc, #384]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	0049      	lsls	r1, r1, #1
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a82:	f7fe ffb5 	bl	80009f0 <HAL_GetTick>
 8001a86:	0003      	movs	r3, r0
 8001a88:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8a:	e008      	b.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8c:	f7fe ffb0 	bl	80009f0 <HAL_GetTick>
 8001a90:	0002      	movs	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0a6      	b.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9e:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aaa:	4b52      	ldr	r3, [pc, #328]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	23c0      	movs	r3, #192	; 0xc0
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d034      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	23c0      	movs	r3, #192	; 0xc0
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d02c      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001acc:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a4a      	ldr	r2, [pc, #296]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	0249      	lsls	r1, r1, #9
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ae4:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae6:	6a1a      	ldr	r2, [r3, #32]
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aea:	4945      	ldr	r1, [pc, #276]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001af0:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7fe ff77 	bl	80009f0 <HAL_GetTick>
 8001b02:	0003      	movs	r3, r0
 8001b04:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b06:	e009      	b.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7fe ff72 	bl	80009f0 <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	4a3c      	ldr	r2, [pc, #240]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e067      	b.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	2202      	movs	r2, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4a34      	ldr	r2, [pc, #208]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b36:	430a      	orrs	r2, r1
 8001b38:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b3a:	2317      	movs	r3, #23
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b46:	69da      	ldr	r2, [r3, #28]
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4a:	492f      	ldr	r1, [pc, #188]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d009      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	2203      	movs	r2, #3
 8001b60:	4393      	bics	r3, r2
 8001b62:	0019      	movs	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2202      	movs	r2, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d009      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2220      	movs	r2, #32
 8001b92:	4013      	ands	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	4393      	bics	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	029b      	lsls	r3, r3, #10
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d009      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	2240      	movs	r2, #64	; 0x40
 8001bdc:	4393      	bics	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b006      	add	sp, #24
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	fffffcff 	.word	0xfffffcff
 8001c00:	fffeffff 	.word	0xfffeffff
 8001c04:	00001388 	.word	0x00001388
 8001c08:	efffffff 	.word	0xefffffff
 8001c0c:	fffcffff 	.word	0xfffcffff

08001c10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0a8      	b.n	8001d74 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	2382      	movs	r3, #130	; 0x82
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d009      	beq.n	8001c4a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
 8001c3c:	e005      	b.n	8001c4a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	225d      	movs	r2, #93	; 0x5d
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	225c      	movs	r2, #92	; 0x5c
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7fe fd3a 	bl	80006e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	225d      	movs	r2, #93	; 0x5d
 8001c70:	2102      	movs	r1, #2
 8001c72:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	438a      	bics	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	23e0      	movs	r3, #224	; 0xe0
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d902      	bls.n	8001c96 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e002      	b.n	8001c9c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	015b      	lsls	r3, r3, #5
 8001c9a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	23f0      	movs	r3, #240	; 0xf0
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d008      	beq.n	8001cba <HAL_SPI_Init+0xaa>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	23e0      	movs	r3, #224	; 0xe0
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d002      	beq.n	8001cba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	2382      	movs	r3, #130	; 0x82
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6899      	ldr	r1, [r3, #8]
 8001cc8:	2384      	movs	r3, #132	; 0x84
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	400b      	ands	r3, r1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6999      	ldr	r1, [r3, #24]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	400b      	ands	r3, r1
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	2138      	movs	r1, #56	; 0x38
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	400b      	ands	r3, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	0011      	movs	r1, r2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	401a      	ands	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	2204      	movs	r2, #4
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2110      	movs	r1, #16
 8001d28:	400b      	ands	r3, r1
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d30:	2108      	movs	r1, #8
 8001d32:	400b      	ands	r3, r1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68d9      	ldr	r1, [r3, #12]
 8001d3a:	23f0      	movs	r3, #240	; 0xf0
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	400b      	ands	r3, r1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	0011      	movs	r1, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	015b      	lsls	r3, r3, #5
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4907      	ldr	r1, [pc, #28]	; (8001d7c <HAL_SPI_Init+0x16c>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	225d      	movs	r2, #93	; 0x5d
 8001d6e:	2101      	movs	r1, #1
 8001d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b004      	add	sp, #16
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	fffff7ff 	.word	0xfffff7ff

08001d80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	1cbb      	adds	r3, r7, #2
 8001d90:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d92:	2301      	movs	r3, #1
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d96:	2323      	movs	r3, #35	; 0x23
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	225c      	movs	r2, #92	; 0x5c
 8001da2:	5c9b      	ldrb	r3, [r3, r2]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_SPI_TransmitReceive+0x2c>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e1c4      	b.n	8002136 <HAL_SPI_TransmitReceive+0x3b6>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	225c      	movs	r2, #92	; 0x5c
 8001db0:	2101      	movs	r1, #1
 8001db2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001db4:	f7fe fe1c 	bl	80009f0 <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001dbc:	201b      	movs	r0, #27
 8001dbe:	183b      	adds	r3, r7, r0
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	215d      	movs	r1, #93	; 0x5d
 8001dc4:	5c52      	ldrb	r2, [r2, r1]
 8001dc6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001dce:	2312      	movs	r3, #18
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	1cba      	adds	r2, r7, #2
 8001dd4:	8812      	ldrh	r2, [r2, #0]
 8001dd6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d011      	beq.n	8001e04 <HAL_SPI_TransmitReceive+0x84>
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	2382      	movs	r3, #130	; 0x82
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d107      	bne.n	8001dfa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <HAL_SPI_TransmitReceive+0x7a>
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d004      	beq.n	8001e04 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001dfa:	2323      	movs	r3, #35	; 0x23
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2202      	movs	r2, #2
 8001e00:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e02:	e191      	b.n	8002128 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <HAL_SPI_TransmitReceive+0x98>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_SPI_TransmitReceive+0x98>
 8001e10:	1cbb      	adds	r3, r7, #2
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001e18:	2323      	movs	r3, #35	; 0x23
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e20:	e182      	b.n	8002128 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	225d      	movs	r2, #93	; 0x5d
 8001e26:	5c9b      	ldrb	r3, [r3, r2]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d003      	beq.n	8001e36 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	225d      	movs	r2, #93	; 0x5d
 8001e32:	2105      	movs	r1, #5
 8001e34:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1cba      	adds	r2, r7, #2
 8001e46:	2146      	movs	r1, #70	; 0x46
 8001e48:	8812      	ldrh	r2, [r2, #0]
 8001e4a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1cba      	adds	r2, r7, #2
 8001e50:	2144      	movs	r1, #68	; 0x44
 8001e52:	8812      	ldrh	r2, [r2, #0]
 8001e54:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1cba      	adds	r2, r7, #2
 8001e60:	8812      	ldrh	r2, [r2, #0]
 8001e62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1cba      	adds	r2, r7, #2
 8001e68:	8812      	ldrh	r2, [r2, #0]
 8001e6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	23e0      	movs	r3, #224	; 0xe0
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d908      	bls.n	8001e96 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	49ac      	ldr	r1, [pc, #688]	; (8002140 <HAL_SPI_TransmitReceive+0x3c0>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	e008      	b.n	8001ea8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	0149      	lsls	r1, r1, #5
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b40      	cmp	r3, #64	; 0x40
 8001eb4:	d007      	beq.n	8001ec6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2140      	movs	r1, #64	; 0x40
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	23e0      	movs	r3, #224	; 0xe0
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d800      	bhi.n	8001ed4 <HAL_SPI_TransmitReceive+0x154>
 8001ed2:	e083      	b.n	8001fdc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_SPI_TransmitReceive+0x168>
 8001edc:	2312      	movs	r3, #18
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d000      	beq.n	8001ee8 <HAL_SPI_TransmitReceive+0x168>
 8001ee6:	e06d      	b.n	8001fc4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	1c9a      	adds	r2, r3, #2
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f0c:	e05a      	b.n	8001fc4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d11b      	bne.n	8001f54 <HAL_SPI_TransmitReceive+0x1d4>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d016      	beq.n	8001f54 <HAL_SPI_TransmitReceive+0x1d4>
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d113      	bne.n	8001f54 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	881a      	ldrh	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	1c9a      	adds	r2, r3, #2
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d11c      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x21c>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2246      	movs	r2, #70	; 0x46
 8001f66:	5a9b      	ldrh	r3, [r3, r2]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d016      	beq.n	8001f9c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	1c9a      	adds	r2, r3, #2
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2246      	movs	r2, #70	; 0x46
 8001f8a:	5a9b      	ldrh	r3, [r3, r2]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b299      	uxth	r1, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2246      	movs	r2, #70	; 0x46
 8001f96:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f9c:	f7fe fd28 	bl	80009f0 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d80b      	bhi.n	8001fc4 <HAL_SPI_TransmitReceive+0x244>
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fae:	3301      	adds	r3, #1
 8001fb0:	d008      	beq.n	8001fc4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8001fb2:	2323      	movs	r3, #35	; 0x23
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	225d      	movs	r2, #93	; 0x5d
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
        goto error;
 8001fc2:	e0b1      	b.n	8002128 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d19f      	bne.n	8001f0e <HAL_SPI_TransmitReceive+0x18e>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2246      	movs	r2, #70	; 0x46
 8001fd2:	5a9b      	ldrh	r3, [r3, r2]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d199      	bne.n	8001f0e <HAL_SPI_TransmitReceive+0x18e>
 8001fda:	e089      	b.n	80020f0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_SPI_TransmitReceive+0x270>
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d000      	beq.n	8001ff0 <HAL_SPI_TransmitReceive+0x270>
 8001fee:	e074      	b.n	80020da <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	7812      	ldrb	r2, [r2, #0]
 8001ffc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002016:	e060      	b.n	80020da <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2202      	movs	r2, #2
 8002020:	4013      	ands	r3, r2
 8002022:	2b02      	cmp	r3, #2
 8002024:	d11c      	bne.n	8002060 <HAL_SPI_TransmitReceive+0x2e0>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d017      	beq.n	8002060 <HAL_SPI_TransmitReceive+0x2e0>
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	2b01      	cmp	r3, #1
 8002034:	d114      	bne.n	8002060 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	330c      	adds	r3, #12
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2201      	movs	r2, #1
 8002068:	4013      	ands	r3, r2
 800206a:	2b01      	cmp	r3, #1
 800206c:	d11e      	bne.n	80020ac <HAL_SPI_TransmitReceive+0x32c>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2246      	movs	r2, #70	; 0x46
 8002072:	5a9b      	ldrh	r3, [r3, r2]
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d018      	beq.n	80020ac <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	330c      	adds	r3, #12
 8002080:	001a      	movs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2246      	movs	r2, #70	; 0x46
 800209a:	5a9b      	ldrh	r3, [r3, r2]
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b299      	uxth	r1, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2246      	movs	r2, #70	; 0x46
 80020a6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020a8:	2301      	movs	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020ac:	f7fe fca0 	bl	80009f0 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d802      	bhi.n	80020c2 <HAL_SPI_TransmitReceive+0x342>
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	3301      	adds	r3, #1
 80020c0:	d102      	bne.n	80020c8 <HAL_SPI_TransmitReceive+0x348>
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d108      	bne.n	80020da <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80020c8:	2323      	movs	r3, #35	; 0x23
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2203      	movs	r2, #3
 80020ce:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	225d      	movs	r2, #93	; 0x5d
 80020d4:	2101      	movs	r1, #1
 80020d6:	5499      	strb	r1, [r3, r2]
        goto error;
 80020d8:	e026      	b.n	8002128 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d199      	bne.n	8002018 <HAL_SPI_TransmitReceive+0x298>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2246      	movs	r2, #70	; 0x46
 80020e8:	5a9b      	ldrh	r3, [r3, r2]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d193      	bne.n	8002018 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 f954 	bl	80023a4 <SPI_EndRxTxTransaction>
 80020fc:	1e03      	subs	r3, r0, #0
 80020fe:	d006      	beq.n	800210e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002100:	2323      	movs	r3, #35	; 0x23
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002116:	2323      	movs	r3, #35	; 0x23
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e003      	b.n	8002128 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	225d      	movs	r2, #93	; 0x5d
 8002124:	2101      	movs	r1, #1
 8002126:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	225c      	movs	r2, #92	; 0x5c
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002130:	2323      	movs	r3, #35	; 0x23
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b00a      	add	sp, #40	; 0x28
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	ffffefff 	.word	0xffffefff

08002144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002154:	f7fe fc4c 	bl	80009f0 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002164:	f7fe fc44 	bl	80009f0 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800216c:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	015b      	lsls	r3, r3, #5
 8002172:	0d1b      	lsrs	r3, r3, #20
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	4353      	muls	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800217a:	e058      	b.n	800222e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	d055      	beq.n	800222e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002182:	f7fe fc35 	bl	80009f0 <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	429a      	cmp	r2, r3
 8002190:	d902      	bls.n	8002198 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d142      	bne.n	800221e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	21e0      	movs	r1, #224	; 0xe0
 80021a4:	438a      	bics	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	2382      	movs	r3, #130	; 0x82
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d113      	bne.n	80021dc <SPI_WaitFlagStateUntilTimeout+0x98>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	429a      	cmp	r2, r3
 80021be:	d005      	beq.n	80021cc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	438a      	bics	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	019b      	lsls	r3, r3, #6
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d110      	bne.n	800220a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	491a      	ldr	r1, [pc, #104]	; (800225c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	0189      	lsls	r1, r1, #6
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	225d      	movs	r2, #93	; 0x5d
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	225c      	movs	r2, #92	; 0x5c
 8002216:	2100      	movs	r1, #0
 8002218:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e017      	b.n	800224e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3b01      	subs	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	4013      	ands	r3, r2
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	425a      	negs	r2, r3
 800223e:	4153      	adcs	r3, r2
 8002240:	b2db      	uxtb	r3, r3
 8002242:	001a      	movs	r2, r3
 8002244:	1dfb      	adds	r3, r7, #7
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d197      	bne.n	800217c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b008      	add	sp, #32
 8002254:	bd80      	pop	{r7, pc}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	20000000 	.word	0x20000000
 800225c:	ffffdfff 	.word	0xffffdfff

08002260 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800226e:	2317      	movs	r3, #23
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002276:	f7fe fbbb 	bl	80009f0 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	18d3      	adds	r3, r2, r3
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002286:	f7fe fbb3 	bl	80009f0 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	330c      	adds	r3, #12
 8002294:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	0013      	movs	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	189b      	adds	r3, r3, r2
 80022a0:	00da      	lsls	r2, r3, #3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	0d1b      	lsrs	r3, r3, #20
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	4353      	muls	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80022ac:	e068      	b.n	8002380 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	23c0      	movs	r3, #192	; 0xc0
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d10a      	bne.n	80022ce <SPI_WaitFifoStateUntilTimeout+0x6e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	2117      	movs	r1, #23
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	d055      	beq.n	8002380 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022d4:	f7fe fb8c 	bl	80009f0 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d902      	bls.n	80022ea <SPI_WaitFifoStateUntilTimeout+0x8a>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d142      	bne.n	8002370 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	21e0      	movs	r1, #224	; 0xe0
 80022f6:	438a      	bics	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	2382      	movs	r3, #130	; 0x82
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	429a      	cmp	r2, r3
 8002304:	d113      	bne.n	800232e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	429a      	cmp	r2, r3
 8002310:	d005      	beq.n	800231e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	429a      	cmp	r2, r3
 800231c:	d107      	bne.n	800232e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2140      	movs	r1, #64	; 0x40
 800232a:	438a      	bics	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	429a      	cmp	r2, r3
 8002338:	d110      	bne.n	800235c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4916      	ldr	r1, [pc, #88]	; (80023a0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002346:	400a      	ands	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	0189      	lsls	r1, r1, #6
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	225d      	movs	r2, #93	; 0x5d
 8002360:	2101      	movs	r1, #1
 8002362:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	225c      	movs	r2, #92	; 0x5c
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e010      	b.n	8002392 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3b01      	subs	r3, #1
 800237e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d18e      	bne.n	80022ae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b00a      	add	sp, #40	; 0x28
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	20000000 	.word	0x20000000
 80023a0:	ffffdfff 	.word	0xffffdfff

080023a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	23c0      	movs	r3, #192	; 0xc0
 80023b4:	0159      	lsls	r1, r3, #5
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	0013      	movs	r3, r2
 80023be:	2200      	movs	r2, #0
 80023c0:	f7ff ff4e 	bl	8002260 <SPI_WaitFifoStateUntilTimeout>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d007      	beq.n	80023d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023cc:	2220      	movs	r2, #32
 80023ce:	431a      	orrs	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e027      	b.n	8002428 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	0013      	movs	r3, r2
 80023e2:	2200      	movs	r2, #0
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	f7ff fead 	bl	8002144 <SPI_WaitFlagStateUntilTimeout>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d007      	beq.n	80023fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	2220      	movs	r2, #32
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e014      	b.n	8002428 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	23c0      	movs	r3, #192	; 0xc0
 8002402:	00d9      	lsls	r1, r3, #3
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	0013      	movs	r3, r2
 800240c:	2200      	movs	r2, #0
 800240e:	f7ff ff27 	bl	8002260 <SPI_WaitFifoStateUntilTimeout>
 8002412:	1e03      	subs	r3, r0, #0
 8002414:	d007      	beq.n	8002426 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	2220      	movs	r2, #32
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e000      	b.n	8002428 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b004      	add	sp, #16
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e044      	b.n	80024cc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2278      	movs	r2, #120	; 0x78
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f7fe f991 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2224      	movs	r2, #36	; 0x24
 800245e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2101      	movs	r1, #1
 800246c:	438a      	bics	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 fbcc 	bl	8002c10 <UART_SetConfig>
 8002478:	0003      	movs	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e024      	b.n	80024cc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 fd47 	bl	8002f20 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	490d      	ldr	r1, [pc, #52]	; (80024d4 <HAL_UART_Init+0xa4>)
 800249e:	400a      	ands	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	212a      	movs	r1, #42	; 0x2a
 80024ae:	438a      	bics	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 fddf 	bl	8003088 <UART_CheckIdleState>
 80024ca:	0003      	movs	r3, r0
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	ffffb7ff 	.word	0xffffb7ff

080024d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	1dbb      	adds	r3, r7, #6
 80024e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d000      	beq.n	80024f2 <HAL_UART_Transmit+0x1a>
 80024f0:	e08d      	b.n	800260e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_UART_Transmit+0x28>
 80024f8:	1dbb      	adds	r3, r7, #6
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e085      	b.n	8002610 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	015b      	lsls	r3, r3, #5
 800250c:	429a      	cmp	r2, r3
 800250e:	d109      	bne.n	8002524 <HAL_UART_Transmit+0x4c>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	d001      	beq.n	8002524 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e075      	b.n	8002610 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2284      	movs	r2, #132	; 0x84
 8002528:	2100      	movs	r1, #0
 800252a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2221      	movs	r2, #33	; 0x21
 8002530:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002532:	f7fe fa5d 	bl	80009f0 <HAL_GetTick>
 8002536:	0003      	movs	r3, r0
 8002538:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1dba      	adds	r2, r7, #6
 800253e:	2150      	movs	r1, #80	; 0x50
 8002540:	8812      	ldrh	r2, [r2, #0]
 8002542:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1dba      	adds	r2, r7, #6
 8002548:	2152      	movs	r1, #82	; 0x52
 800254a:	8812      	ldrh	r2, [r2, #0]
 800254c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	015b      	lsls	r3, r3, #5
 8002556:	429a      	cmp	r2, r3
 8002558:	d108      	bne.n	800256c <HAL_UART_Transmit+0x94>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d104      	bne.n	800256c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	e003      	b.n	8002574 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002574:	e030      	b.n	80025d8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	0013      	movs	r3, r2
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	f000 fe28 	bl	80031d8 <UART_WaitOnFlagUntilTimeout>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d004      	beq.n	8002596 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e03c      	b.n	8002610 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	881a      	ldrh	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	05d2      	lsls	r2, r2, #23
 80025a6:	0dd2      	lsrs	r2, r2, #23
 80025a8:	b292      	uxth	r2, r2
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	3302      	adds	r3, #2
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	e008      	b.n	80025c6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b292      	uxth	r2, r2
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	3301      	adds	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2252      	movs	r2, #82	; 0x52
 80025ca:	5a9b      	ldrh	r3, [r3, r2]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b299      	uxth	r1, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2252      	movs	r2, #82	; 0x52
 80025d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2252      	movs	r2, #82	; 0x52
 80025dc:	5a9b      	ldrh	r3, [r3, r2]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1c8      	bne.n	8002576 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	0013      	movs	r3, r2
 80025ee:	2200      	movs	r2, #0
 80025f0:	2140      	movs	r1, #64	; 0x40
 80025f2:	f000 fdf1 	bl	80031d8 <UART_WaitOnFlagUntilTimeout>
 80025f6:	1e03      	subs	r3, r0, #0
 80025f8:	d004      	beq.n	8002604 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e005      	b.n	8002610 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b008      	add	sp, #32
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b0ab      	sub	sp, #172	; 0xac
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	22a4      	movs	r2, #164	; 0xa4
 8002628:	18b9      	adds	r1, r7, r2
 800262a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	20a0      	movs	r0, #160	; 0xa0
 8002634:	1839      	adds	r1, r7, r0
 8002636:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	219c      	movs	r1, #156	; 0x9c
 8002640:	1879      	adds	r1, r7, r1
 8002642:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002644:	0011      	movs	r1, r2
 8002646:	18bb      	adds	r3, r7, r2
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a99      	ldr	r2, [pc, #612]	; (80028b0 <HAL_UART_IRQHandler+0x298>)
 800264c:	4013      	ands	r3, r2
 800264e:	2298      	movs	r2, #152	; 0x98
 8002650:	18bc      	adds	r4, r7, r2
 8002652:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002654:	18bb      	adds	r3, r7, r2
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d114      	bne.n	8002686 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800265c:	187b      	adds	r3, r7, r1
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2220      	movs	r2, #32
 8002662:	4013      	ands	r3, r2
 8002664:	d00f      	beq.n	8002686 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002666:	183b      	adds	r3, r7, r0
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2220      	movs	r2, #32
 800266c:	4013      	ands	r3, r2
 800266e:	d00a      	beq.n	8002686 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002674:	2b00      	cmp	r3, #0
 8002676:	d100      	bne.n	800267a <HAL_UART_IRQHandler+0x62>
 8002678:	e29e      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	0010      	movs	r0, r2
 8002682:	4798      	blx	r3
      }
      return;
 8002684:	e298      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002686:	2398      	movs	r3, #152	; 0x98
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d100      	bne.n	8002692 <HAL_UART_IRQHandler+0x7a>
 8002690:	e114      	b.n	80028bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002692:	239c      	movs	r3, #156	; 0x9c
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	4013      	ands	r3, r2
 800269c:	d106      	bne.n	80026ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800269e:	23a0      	movs	r3, #160	; 0xa0
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a83      	ldr	r2, [pc, #524]	; (80028b4 <HAL_UART_IRQHandler+0x29c>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	d100      	bne.n	80026ac <HAL_UART_IRQHandler+0x94>
 80026aa:	e107      	b.n	80028bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026ac:	23a4      	movs	r3, #164	; 0xa4
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d012      	beq.n	80026de <HAL_UART_IRQHandler+0xc6>
 80026b8:	23a0      	movs	r3, #160	; 0xa0
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d00b      	beq.n	80026de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2284      	movs	r2, #132	; 0x84
 80026d2:	589b      	ldr	r3, [r3, r2]
 80026d4:	2201      	movs	r2, #1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2184      	movs	r1, #132	; 0x84
 80026dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026de:	23a4      	movs	r3, #164	; 0xa4
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2202      	movs	r2, #2
 80026e6:	4013      	ands	r3, r2
 80026e8:	d011      	beq.n	800270e <HAL_UART_IRQHandler+0xf6>
 80026ea:	239c      	movs	r3, #156	; 0x9c
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	4013      	ands	r3, r2
 80026f4:	d00b      	beq.n	800270e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2202      	movs	r2, #2
 80026fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2284      	movs	r2, #132	; 0x84
 8002702:	589b      	ldr	r3, [r3, r2]
 8002704:	2204      	movs	r2, #4
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2184      	movs	r1, #132	; 0x84
 800270c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800270e:	23a4      	movs	r3, #164	; 0xa4
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2204      	movs	r2, #4
 8002716:	4013      	ands	r3, r2
 8002718:	d011      	beq.n	800273e <HAL_UART_IRQHandler+0x126>
 800271a:	239c      	movs	r3, #156	; 0x9c
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2201      	movs	r2, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d00b      	beq.n	800273e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2204      	movs	r2, #4
 800272c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2284      	movs	r2, #132	; 0x84
 8002732:	589b      	ldr	r3, [r3, r2]
 8002734:	2202      	movs	r2, #2
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2184      	movs	r1, #132	; 0x84
 800273c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800273e:	23a4      	movs	r3, #164	; 0xa4
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2208      	movs	r2, #8
 8002746:	4013      	ands	r3, r2
 8002748:	d017      	beq.n	800277a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800274a:	23a0      	movs	r3, #160	; 0xa0
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2220      	movs	r2, #32
 8002752:	4013      	ands	r3, r2
 8002754:	d105      	bne.n	8002762 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002756:	239c      	movs	r3, #156	; 0x9c
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2201      	movs	r2, #1
 800275e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002760:	d00b      	beq.n	800277a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2208      	movs	r2, #8
 8002768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2284      	movs	r2, #132	; 0x84
 800276e:	589b      	ldr	r3, [r3, r2]
 8002770:	2208      	movs	r2, #8
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2184      	movs	r1, #132	; 0x84
 8002778:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800277a:	23a4      	movs	r3, #164	; 0xa4
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	4013      	ands	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_UART_IRQHandler+0x198>
 8002788:	23a0      	movs	r3, #160	; 0xa0
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	04db      	lsls	r3, r3, #19
 8002792:	4013      	ands	r3, r2
 8002794:	d00c      	beq.n	80027b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2284      	movs	r2, #132	; 0x84
 80027a4:	589b      	ldr	r3, [r3, r2]
 80027a6:	2220      	movs	r2, #32
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2184      	movs	r1, #132	; 0x84
 80027ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2284      	movs	r2, #132	; 0x84
 80027b4:	589b      	ldr	r3, [r3, r2]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d100      	bne.n	80027bc <HAL_UART_IRQHandler+0x1a4>
 80027ba:	e1ff      	b.n	8002bbc <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027bc:	23a4      	movs	r3, #164	; 0xa4
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2220      	movs	r2, #32
 80027c4:	4013      	ands	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027c8:	23a0      	movs	r3, #160	; 0xa0
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2220      	movs	r2, #32
 80027d0:	4013      	ands	r3, r2
 80027d2:	d008      	beq.n	80027e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	0010      	movs	r0, r2
 80027e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2284      	movs	r2, #132	; 0x84
 80027ea:	589b      	ldr	r3, [r3, r2]
 80027ec:	2194      	movs	r1, #148	; 0x94
 80027ee:	187a      	adds	r2, r7, r1
 80027f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2240      	movs	r2, #64	; 0x40
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d004      	beq.n	800280a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002800:	187b      	adds	r3, r7, r1
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2228      	movs	r2, #40	; 0x28
 8002806:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002808:	d047      	beq.n	800289a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 fd4d 	bl	80032ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	4013      	ands	r3, r2
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d137      	bne.n	8002890 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002820:	f3ef 8310 	mrs	r3, PRIMASK
 8002824:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002828:	2090      	movs	r0, #144	; 0x90
 800282a:	183a      	adds	r2, r7, r0
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002834:	f383 8810 	msr	PRIMASK, r3
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2140      	movs	r1, #64	; 0x40
 8002846:	438a      	bics	r2, r1
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	183b      	adds	r3, r7, r0
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_UART_IRQHandler+0x2a0>)
 8002866:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286c:	0018      	movs	r0, r3
 800286e:	f7fe fa03 	bl	8000c78 <HAL_DMA_Abort_IT>
 8002872:	1e03      	subs	r3, r0, #0
 8002874:	d01a      	beq.n	80028ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002880:	0018      	movs	r0, r3
 8002882:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	e012      	b.n	80028ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 f9ad 	bl	8002be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288e:	e00d      	b.n	80028ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0018      	movs	r0, r3
 8002894:	f000 f9a8 	bl	8002be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	e008      	b.n	80028ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0018      	movs	r0, r3
 800289e:	f000 f9a3 	bl	8002be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2284      	movs	r2, #132	; 0x84
 80028a6:	2100      	movs	r1, #0
 80028a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80028aa:	e187      	b.n	8002bbc <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ac:	46c0      	nop			; (mov r8, r8)
    return;
 80028ae:	e185      	b.n	8002bbc <HAL_UART_IRQHandler+0x5a4>
 80028b0:	0000080f 	.word	0x0000080f
 80028b4:	04000120 	.word	0x04000120
 80028b8:	08003375 	.word	0x08003375

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d000      	beq.n	80028c6 <HAL_UART_IRQHandler+0x2ae>
 80028c4:	e139      	b.n	8002b3a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028c6:	23a4      	movs	r3, #164	; 0xa4
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2210      	movs	r2, #16
 80028ce:	4013      	ands	r3, r2
 80028d0:	d100      	bne.n	80028d4 <HAL_UART_IRQHandler+0x2bc>
 80028d2:	e132      	b.n	8002b3a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028d4:	23a0      	movs	r3, #160	; 0xa0
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	4013      	ands	r3, r2
 80028de:	d100      	bne.n	80028e2 <HAL_UART_IRQHandler+0x2ca>
 80028e0:	e12b      	b.n	8002b3a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2210      	movs	r2, #16
 80028e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d000      	beq.n	80028fa <HAL_UART_IRQHandler+0x2e2>
 80028f8:	e09f      	b.n	8002a3a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	217e      	movs	r1, #126	; 0x7e
 8002904:	187b      	adds	r3, r7, r1
 8002906:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002908:	187b      	adds	r3, r7, r1
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d100      	bne.n	8002912 <HAL_UART_IRQHandler+0x2fa>
 8002910:	e156      	b.n	8002bc0 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2258      	movs	r2, #88	; 0x58
 8002916:	5a9b      	ldrh	r3, [r3, r2]
 8002918:	187a      	adds	r2, r7, r1
 800291a:	8812      	ldrh	r2, [r2, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d300      	bcc.n	8002922 <HAL_UART_IRQHandler+0x30a>
 8002920:	e14e      	b.n	8002bc0 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	187a      	adds	r2, r7, r1
 8002926:	215a      	movs	r1, #90	; 0x5a
 8002928:	8812      	ldrh	r2, [r2, #0]
 800292a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b20      	cmp	r3, #32
 8002934:	d06f      	beq.n	8002a16 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002936:	f3ef 8310 	mrs	r3, PRIMASK
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800293e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002940:	2301      	movs	r3, #1
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002946:	f383 8810 	msr	PRIMASK, r3
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	499e      	ldr	r1, [pc, #632]	; (8002bd0 <HAL_UART_IRQHandler+0x5b8>)
 8002958:	400a      	ands	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	f383 8810 	msr	PRIMASK, r3
}
 8002966:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002968:	f3ef 8310 	mrs	r3, PRIMASK
 800296c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002970:	677b      	str	r3, [r7, #116]	; 0x74
 8002972:	2301      	movs	r3, #1
 8002974:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002978:	f383 8810 	msr	PRIMASK, r3
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	438a      	bics	r2, r1
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002990:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800299a:	f3ef 8310 	mrs	r3, PRIMASK
 800299e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80029a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a2:	673b      	str	r3, [r7, #112]	; 0x70
 80029a4:	2301      	movs	r3, #1
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029aa:	f383 8810 	msr	PRIMASK, r3
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2140      	movs	r1, #64	; 0x40
 80029bc:	438a      	bics	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c6:	f383 8810 	msr	PRIMASK, r3
}
 80029ca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	2120      	movs	r1, #32
 80029d2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029da:	f3ef 8310 	mrs	r3, PRIMASK
 80029de:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80029e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029e4:	2301      	movs	r3, #1
 80029e6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ea:	f383 8810 	msr	PRIMASK, r3
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2110      	movs	r1, #16
 80029fc:	438a      	bics	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a02:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a06:	f383 8810 	msr	PRIMASK, r3
}
 8002a0a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7fe f8f9 	bl	8000c08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2258      	movs	r2, #88	; 0x58
 8002a20:	5a9a      	ldrh	r2, [r3, r2]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	215a      	movs	r1, #90	; 0x5a
 8002a26:	5a5b      	ldrh	r3, [r3, r1]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0011      	movs	r1, r2
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f8e0 	bl	8002bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a38:	e0c2      	b.n	8002bc0 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2258      	movs	r2, #88	; 0x58
 8002a3e:	5a99      	ldrh	r1, [r3, r2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	225a      	movs	r2, #90	; 0x5a
 8002a44:	5a9b      	ldrh	r3, [r3, r2]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	208e      	movs	r0, #142	; 0x8e
 8002a4a:	183b      	adds	r3, r7, r0
 8002a4c:	1a8a      	subs	r2, r1, r2
 8002a4e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	225a      	movs	r2, #90	; 0x5a
 8002a54:	5a9b      	ldrh	r3, [r3, r2]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d100      	bne.n	8002a5e <HAL_UART_IRQHandler+0x446>
 8002a5c:	e0b2      	b.n	8002bc4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002a5e:	183b      	adds	r3, r7, r0
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d100      	bne.n	8002a68 <HAL_UART_IRQHandler+0x450>
 8002a66:	e0ad      	b.n	8002bc4 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a68:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a70:	2488      	movs	r4, #136	; 0x88
 8002a72:	193a      	adds	r2, r7, r4
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	2301      	movs	r3, #1
 8002a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f383 8810 	msr	PRIMASK, r3
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4951      	ldr	r1, [pc, #324]	; (8002bd4 <HAL_UART_IRQHandler+0x5bc>)
 8002a8e:	400a      	ands	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002aa6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa8:	2484      	movs	r4, #132	; 0x84
 8002aaa:	193a      	adds	r2, r7, r4
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f383 8810 	msr	PRIMASK, r3
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	193b      	adds	r3, r7, r4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f383 8810 	msr	PRIMASK, r3
}
 8002ad6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	2120      	movs	r1, #32
 8002ade:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aec:	f3ef 8310 	mrs	r3, PRIMASK
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af4:	2480      	movs	r4, #128	; 0x80
 8002af6:	193a      	adds	r2, r7, r4
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	2301      	movs	r3, #1
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	f383 8810 	msr	PRIMASK, r3
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2110      	movs	r1, #16
 8002b12:	438a      	bics	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	193b      	adds	r3, r7, r4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	f383 8810 	msr	PRIMASK, r3
}
 8002b22:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b2a:	183b      	adds	r3, r7, r0
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0011      	movs	r1, r2
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 f860 	bl	8002bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b38:	e044      	b.n	8002bc4 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b3a:	23a4      	movs	r3, #164	; 0xa4
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	035b      	lsls	r3, r3, #13
 8002b44:	4013      	ands	r3, r2
 8002b46:	d010      	beq.n	8002b6a <HAL_UART_IRQHandler+0x552>
 8002b48:	239c      	movs	r3, #156	; 0x9c
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	03db      	lsls	r3, r3, #15
 8002b52:	4013      	ands	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	0352      	lsls	r2, r2, #13
 8002b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fc48 	bl	80033f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b68:	e02f      	b.n	8002bca <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b6a:	23a4      	movs	r3, #164	; 0xa4
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	4013      	ands	r3, r2
 8002b74:	d00f      	beq.n	8002b96 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b76:	23a0      	movs	r3, #160	; 0xa0
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01e      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	0010      	movs	r0, r2
 8002b92:	4798      	blx	r3
    }
    return;
 8002b94:	e018      	b.n	8002bc8 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b96:	23a4      	movs	r3, #164	; 0xa4
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2240      	movs	r2, #64	; 0x40
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_UART_IRQHandler+0x5b2>
 8002ba2:	23a0      	movs	r3, #160	; 0xa0
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	4013      	ands	r3, r2
 8002bac:	d00d      	beq.n	8002bca <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 fbf6 	bl	80033a2 <UART_EndTransmit_IT>
    return;
 8002bb6:	e008      	b.n	8002bca <HAL_UART_IRQHandler+0x5b2>
      return;
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	e006      	b.n	8002bca <HAL_UART_IRQHandler+0x5b2>
    return;
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	e004      	b.n	8002bca <HAL_UART_IRQHandler+0x5b2>
      return;
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	e002      	b.n	8002bca <HAL_UART_IRQHandler+0x5b2>
      return;
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	e000      	b.n	8002bca <HAL_UART_IRQHandler+0x5b2>
    return;
 8002bc8:	46c0      	nop			; (mov r8, r8)
  }

}
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b02b      	add	sp, #172	; 0xac
 8002bce:	bd90      	pop	{r4, r7, pc}
 8002bd0:	fffffeff 	.word	0xfffffeff
 8002bd4:	fffffedf 	.word	0xfffffedf

08002bd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	000a      	movs	r2, r1
 8002c02:	1cbb      	adds	r3, r7, #2
 8002c04:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b002      	add	sp, #8
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c18:	231e      	movs	r3, #30
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4aaf      	ldr	r2, [pc, #700]	; (8002efc <UART_SetConfig+0x2ec>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4aaa      	ldr	r2, [pc, #680]	; (8002f00 <UART_SetConfig+0x2f0>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4aa1      	ldr	r2, [pc, #644]	; (8002f04 <UART_SetConfig+0x2f4>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a9d      	ldr	r2, [pc, #628]	; (8002f08 <UART_SetConfig+0x2f8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d127      	bne.n	8002ce6 <UART_SetConfig+0xd6>
 8002c96:	4b9d      	ldr	r3, [pc, #628]	; (8002f0c <UART_SetConfig+0x2fc>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d00d      	beq.n	8002cbe <UART_SetConfig+0xae>
 8002ca2:	d81b      	bhi.n	8002cdc <UART_SetConfig+0xcc>
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d014      	beq.n	8002cd2 <UART_SetConfig+0xc2>
 8002ca8:	d818      	bhi.n	8002cdc <UART_SetConfig+0xcc>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <UART_SetConfig+0xa4>
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d00a      	beq.n	8002cc8 <UART_SetConfig+0xb8>
 8002cb2:	e013      	b.n	8002cdc <UART_SetConfig+0xcc>
 8002cb4:	231f      	movs	r3, #31
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e065      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002cbe:	231f      	movs	r3, #31
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e060      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002cc8:	231f      	movs	r3, #31
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2204      	movs	r2, #4
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e05b      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002cd2:	231f      	movs	r3, #31
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e056      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002cdc:	231f      	movs	r3, #31
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e051      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a89      	ldr	r2, [pc, #548]	; (8002f10 <UART_SetConfig+0x300>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d134      	bne.n	8002d5a <UART_SetConfig+0x14a>
 8002cf0:	4b86      	ldr	r3, [pc, #536]	; (8002f0c <UART_SetConfig+0x2fc>)
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf4:	23c0      	movs	r3, #192	; 0xc0
 8002cf6:	029b      	lsls	r3, r3, #10
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	22c0      	movs	r2, #192	; 0xc0
 8002cfc:	0292      	lsls	r2, r2, #10
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d017      	beq.n	8002d32 <UART_SetConfig+0x122>
 8002d02:	22c0      	movs	r2, #192	; 0xc0
 8002d04:	0292      	lsls	r2, r2, #10
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d822      	bhi.n	8002d50 <UART_SetConfig+0x140>
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	0292      	lsls	r2, r2, #10
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <UART_SetConfig+0x136>
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	0292      	lsls	r2, r2, #10
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d81a      	bhi.n	8002d50 <UART_SetConfig+0x140>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <UART_SetConfig+0x118>
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	0252      	lsls	r2, r2, #9
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00a      	beq.n	8002d3c <UART_SetConfig+0x12c>
 8002d26:	e013      	b.n	8002d50 <UART_SetConfig+0x140>
 8002d28:	231f      	movs	r3, #31
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e02b      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002d32:	231f      	movs	r3, #31
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2202      	movs	r2, #2
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e026      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002d3c:	231f      	movs	r3, #31
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	2204      	movs	r2, #4
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e021      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002d46:	231f      	movs	r3, #31
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e01c      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002d50:	231f      	movs	r3, #31
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2210      	movs	r2, #16
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e017      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6d      	ldr	r2, [pc, #436]	; (8002f14 <UART_SetConfig+0x304>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d104      	bne.n	8002d6e <UART_SetConfig+0x15e>
 8002d64:	231f      	movs	r3, #31
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e00d      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a69      	ldr	r2, [pc, #420]	; (8002f18 <UART_SetConfig+0x308>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d104      	bne.n	8002d82 <UART_SetConfig+0x172>
 8002d78:	231f      	movs	r3, #31
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e003      	b.n	8002d8a <UART_SetConfig+0x17a>
 8002d82:	231f      	movs	r3, #31
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2210      	movs	r2, #16
 8002d88:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d15c      	bne.n	8002e50 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8002d96:	231f      	movs	r3, #31
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d015      	beq.n	8002dcc <UART_SetConfig+0x1bc>
 8002da0:	dc18      	bgt.n	8002dd4 <UART_SetConfig+0x1c4>
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d00d      	beq.n	8002dc2 <UART_SetConfig+0x1b2>
 8002da6:	dc15      	bgt.n	8002dd4 <UART_SetConfig+0x1c4>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <UART_SetConfig+0x1a2>
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d005      	beq.n	8002dbc <UART_SetConfig+0x1ac>
 8002db0:	e010      	b.n	8002dd4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db2:	f7fe fe19 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002db6:	0003      	movs	r3, r0
 8002db8:	61bb      	str	r3, [r7, #24]
        break;
 8002dba:	e012      	b.n	8002de2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dbc:	4b57      	ldr	r3, [pc, #348]	; (8002f1c <UART_SetConfig+0x30c>)
 8002dbe:	61bb      	str	r3, [r7, #24]
        break;
 8002dc0:	e00f      	b.n	8002de2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc2:	f7fe fd95 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	61bb      	str	r3, [r7, #24]
        break;
 8002dca:	e00a      	b.n	8002de2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	61bb      	str	r3, [r7, #24]
        break;
 8002dd2:	e006      	b.n	8002de2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dd8:	231e      	movs	r3, #30
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
        break;
 8002de0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d100      	bne.n	8002dea <UART_SetConfig+0x1da>
 8002de8:	e07a      	b.n	8002ee0 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	005a      	lsls	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	18d2      	adds	r2, r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	f7fd f995 	bl	800012c <__udivsi3>
 8002e02:	0003      	movs	r3, r0
 8002e04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d91c      	bls.n	8002e46 <UART_SetConfig+0x236>
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	025b      	lsls	r3, r3, #9
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d217      	bcs.n	8002e46 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	200e      	movs	r0, #14
 8002e1c:	183b      	adds	r3, r7, r0
 8002e1e:	210f      	movs	r1, #15
 8002e20:	438a      	bics	r2, r1
 8002e22:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b299      	uxth	r1, r3
 8002e30:	183b      	adds	r3, r7, r0
 8002e32:	183a      	adds	r2, r7, r0
 8002e34:	8812      	ldrh	r2, [r2, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	183a      	adds	r2, r7, r0
 8002e40:	8812      	ldrh	r2, [r2, #0]
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	e04c      	b.n	8002ee0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002e46:	231e      	movs	r3, #30
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e047      	b.n	8002ee0 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e50:	231f      	movs	r3, #31
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d015      	beq.n	8002e86 <UART_SetConfig+0x276>
 8002e5a:	dc18      	bgt.n	8002e8e <UART_SetConfig+0x27e>
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d00d      	beq.n	8002e7c <UART_SetConfig+0x26c>
 8002e60:	dc15      	bgt.n	8002e8e <UART_SetConfig+0x27e>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <UART_SetConfig+0x25c>
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d005      	beq.n	8002e76 <UART_SetConfig+0x266>
 8002e6a:	e010      	b.n	8002e8e <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f7fe fdbc 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002e70:	0003      	movs	r3, r0
 8002e72:	61bb      	str	r3, [r7, #24]
        break;
 8002e74:	e012      	b.n	8002e9c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e76:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <UART_SetConfig+0x30c>)
 8002e78:	61bb      	str	r3, [r7, #24]
        break;
 8002e7a:	e00f      	b.n	8002e9c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e7c:	f7fe fd38 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 8002e80:	0003      	movs	r3, r0
 8002e82:	61bb      	str	r3, [r7, #24]
        break;
 8002e84:	e00a      	b.n	8002e9c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	61bb      	str	r3, [r7, #24]
        break;
 8002e8c:	e006      	b.n	8002e9c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e92:	231e      	movs	r3, #30
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
        break;
 8002e9a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01e      	beq.n	8002ee0 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	085a      	lsrs	r2, r3, #1
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	18d2      	adds	r2, r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	0010      	movs	r0, r2
 8002eb4:	f7fd f93a 	bl	800012c <__udivsi3>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b0f      	cmp	r3, #15
 8002ec0:	d90a      	bls.n	8002ed8 <UART_SetConfig+0x2c8>
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d205      	bcs.n	8002ed8 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	e003      	b.n	8002ee0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002ed8:	231e      	movs	r3, #30
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002eec:	231e      	movs	r3, #30
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	781b      	ldrb	r3, [r3, #0]
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b008      	add	sp, #32
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	efff69f3 	.word	0xefff69f3
 8002f00:	ffffcfff 	.word	0xffffcfff
 8002f04:	fffff4ff 	.word	0xfffff4ff
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40004400 	.word	0x40004400
 8002f14:	40004800 	.word	0x40004800
 8002f18:	40004c00 	.word	0x40004c00
 8002f1c:	007a1200 	.word	0x007a1200

08002f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a4a      	ldr	r2, [pc, #296]	; (8003064 <UART_AdvFeatureConfig+0x144>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a43      	ldr	r2, [pc, #268]	; (8003068 <UART_AdvFeatureConfig+0x148>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	2204      	movs	r2, #4
 8002f72:	4013      	ands	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a3b      	ldr	r2, [pc, #236]	; (800306c <UART_AdvFeatureConfig+0x14c>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2208      	movs	r2, #8
 8002f94:	4013      	ands	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a34      	ldr	r2, [pc, #208]	; (8003070 <UART_AdvFeatureConfig+0x150>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <UART_AdvFeatureConfig+0x154>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4a25      	ldr	r2, [pc, #148]	; (8003078 <UART_AdvFeatureConfig+0x158>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2240      	movs	r2, #64	; 0x40
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d01d      	beq.n	800303a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <UART_AdvFeatureConfig+0x15c>)
 8003006:	4013      	ands	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	035b      	lsls	r3, r3, #13
 800301e:	429a      	cmp	r2, r3
 8003020:	d10b      	bne.n	800303a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a15      	ldr	r2, [pc, #84]	; (8003080 <UART_AdvFeatureConfig+0x160>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	4013      	ands	r3, r2
 8003042:	d00b      	beq.n	800305c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <UART_AdvFeatureConfig+0x164>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  }
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}
 8003064:	fffdffff 	.word	0xfffdffff
 8003068:	fffeffff 	.word	0xfffeffff
 800306c:	fffbffff 	.word	0xfffbffff
 8003070:	ffff7fff 	.word	0xffff7fff
 8003074:	ffffefff 	.word	0xffffefff
 8003078:	ffffdfff 	.word	0xffffdfff
 800307c:	ffefffff 	.word	0xffefffff
 8003080:	ff9fffff 	.word	0xff9fffff
 8003084:	fff7ffff 	.word	0xfff7ffff

08003088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b092      	sub	sp, #72	; 0x48
 800308c:	af02      	add	r7, sp, #8
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2284      	movs	r2, #132	; 0x84
 8003094:	2100      	movs	r1, #0
 8003096:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003098:	f7fd fcaa 	bl	80009f0 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2208      	movs	r2, #8
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d12c      	bne.n	8003108 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	0391      	lsls	r1, r2, #14
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4a46      	ldr	r2, [pc, #280]	; (80031d0 <UART_CheckIdleState+0x148>)
 80030b8:	9200      	str	r2, [sp, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f000 f88c 	bl	80031d8 <UART_WaitOnFlagUntilTimeout>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d021      	beq.n	8003108 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c4:	f3ef 8310 	mrs	r3, PRIMASK
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ce:	2301      	movs	r3, #1
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	f383 8810 	msr	PRIMASK, r3
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	438a      	bics	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	f383 8810 	msr	PRIMASK, r3
}
 80030f4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2278      	movs	r2, #120	; 0x78
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e05f      	b.n	80031c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2204      	movs	r2, #4
 8003110:	4013      	ands	r3, r2
 8003112:	2b04      	cmp	r3, #4
 8003114:	d146      	bne.n	80031a4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003118:	2280      	movs	r2, #128	; 0x80
 800311a:	03d1      	lsls	r1, r2, #15
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <UART_CheckIdleState+0x148>)
 8003120:	9200      	str	r2, [sp, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	f000 f858 	bl	80031d8 <UART_WaitOnFlagUntilTimeout>
 8003128:	1e03      	subs	r3, r0, #0
 800312a:	d03b      	beq.n	80031a4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312c:	f3ef 8310 	mrs	r3, PRIMASK
 8003130:	60fb      	str	r3, [r7, #12]
  return(result);
 8003132:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
 8003136:	2301      	movs	r3, #1
 8003138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4921      	ldr	r1, [pc, #132]	; (80031d4 <UART_CheckIdleState+0x14c>)
 800314e:	400a      	ands	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003154:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f383 8810 	msr	PRIMASK, r3
}
 800315c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800315e:	f3ef 8310 	mrs	r3, PRIMASK
 8003162:	61bb      	str	r3, [r7, #24]
  return(result);
 8003164:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003166:	633b      	str	r3, [r7, #48]	; 0x30
 8003168:	2301      	movs	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f383 8810 	msr	PRIMASK, r3
}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2101      	movs	r1, #1
 8003180:	438a      	bics	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f383 8810 	msr	PRIMASK, r3
}
 800318e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	2120      	movs	r1, #32
 8003196:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2278      	movs	r2, #120	; 0x78
 800319c:	2100      	movs	r1, #0
 800319e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e011      	b.n	80031c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	2120      	movs	r1, #32
 80031b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2278      	movs	r2, #120	; 0x78
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b010      	add	sp, #64	; 0x40
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	01ffffff 	.word	0x01ffffff
 80031d4:	fffffedf 	.word	0xfffffedf

080031d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	1dfb      	adds	r3, r7, #7
 80031e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e8:	e04b      	b.n	8003282 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	3301      	adds	r3, #1
 80031ee:	d048      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f0:	f7fd fbfe 	bl	80009f0 <HAL_GetTick>
 80031f4:	0002      	movs	r2, r0
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e04b      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2204      	movs	r2, #4
 8003212:	4013      	ands	r3, r2
 8003214:	d035      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2208      	movs	r2, #8
 800321e:	4013      	ands	r3, r2
 8003220:	2b08      	cmp	r3, #8
 8003222:	d111      	bne.n	8003248 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2208      	movs	r2, #8
 800322a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	0018      	movs	r0, r3
 8003230:	f000 f83c 	bl	80032ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2284      	movs	r2, #132	; 0x84
 8003238:	2108      	movs	r1, #8
 800323a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2278      	movs	r2, #120	; 0x78
 8003240:	2100      	movs	r1, #0
 8003242:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e02c      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	401a      	ands	r2, r3
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	429a      	cmp	r2, r3
 800325a:	d112      	bne.n	8003282 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	0018      	movs	r0, r3
 800326a:	f000 f81f 	bl	80032ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2284      	movs	r2, #132	; 0x84
 8003272:	2120      	movs	r1, #32
 8003274:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2278      	movs	r2, #120	; 0x78
 800327a:	2100      	movs	r1, #0
 800327c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e00f      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	4013      	ands	r3, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	425a      	negs	r2, r3
 8003292:	4153      	adcs	r3, r2
 8003294:	b2db      	uxtb	r3, r3
 8003296:	001a      	movs	r2, r3
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d0a4      	beq.n	80031ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08e      	sub	sp, #56	; 0x38
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b4:	f3ef 8310 	mrs	r3, PRIMASK
 80032b8:	617b      	str	r3, [r7, #20]
  return(result);
 80032ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
 80032be:	2301      	movs	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f383 8810 	msr	PRIMASK, r3
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4926      	ldr	r1, [pc, #152]	; (8003370 <UART_EndRxTransfer+0xc4>)
 80032d6:	400a      	ands	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f383 8810 	msr	PRIMASK, r3
}
 80032e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ea:	623b      	str	r3, [r7, #32]
  return(result);
 80032ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
 80032f0:	2301      	movs	r3, #1
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f383 8810 	msr	PRIMASK, r3
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2101      	movs	r1, #1
 8003308:	438a      	bics	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	f383 8810 	msr	PRIMASK, r3
}
 8003316:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331c:	2b01      	cmp	r3, #1
 800331e:	d118      	bne.n	8003352 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003320:	f3ef 8310 	mrs	r3, PRIMASK
 8003324:	60bb      	str	r3, [r7, #8]
  return(result);
 8003326:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332a:	2301      	movs	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f383 8810 	msr	PRIMASK, r3
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2110      	movs	r1, #16
 8003342:	438a      	bics	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f383 8810 	msr	PRIMASK, r3
}
 8003350:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	2120      	movs	r1, #32
 8003358:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b00e      	add	sp, #56	; 0x38
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	fffffedf 	.word	0xfffffedf

08003374 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	225a      	movs	r2, #90	; 0x5a
 8003386:	2100      	movs	r1, #0
 8003388:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2252      	movs	r2, #82	; 0x52
 800338e:	2100      	movs	r1, #0
 8003390:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	0018      	movs	r0, r3
 8003396:	f7ff fc27 	bl	8002be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b086      	sub	sp, #24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033aa:	f3ef 8310 	mrs	r3, PRIMASK
 80033ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80033b0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	2301      	movs	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2140      	movs	r1, #64	; 0x40
 80033cc:	438a      	bics	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f383 8810 	msr	PRIMASK, r3
}
 80033da:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	0018      	movs	r0, r3
 80033ec:	f7ff fbf4 	bl	8002bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b006      	add	sp, #24
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}

08003408 <__errno>:
 8003408:	4b01      	ldr	r3, [pc, #4]	; (8003410 <__errno+0x8>)
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	4770      	bx	lr
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	2000000c 	.word	0x2000000c

08003414 <__libc_init_array>:
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	2600      	movs	r6, #0
 8003418:	4d0c      	ldr	r5, [pc, #48]	; (800344c <__libc_init_array+0x38>)
 800341a:	4c0d      	ldr	r4, [pc, #52]	; (8003450 <__libc_init_array+0x3c>)
 800341c:	1b64      	subs	r4, r4, r5
 800341e:	10a4      	asrs	r4, r4, #2
 8003420:	42a6      	cmp	r6, r4
 8003422:	d109      	bne.n	8003438 <__libc_init_array+0x24>
 8003424:	2600      	movs	r6, #0
 8003426:	f000 fc9f 	bl	8003d68 <_init>
 800342a:	4d0a      	ldr	r5, [pc, #40]	; (8003454 <__libc_init_array+0x40>)
 800342c:	4c0a      	ldr	r4, [pc, #40]	; (8003458 <__libc_init_array+0x44>)
 800342e:	1b64      	subs	r4, r4, r5
 8003430:	10a4      	asrs	r4, r4, #2
 8003432:	42a6      	cmp	r6, r4
 8003434:	d105      	bne.n	8003442 <__libc_init_array+0x2e>
 8003436:	bd70      	pop	{r4, r5, r6, pc}
 8003438:	00b3      	lsls	r3, r6, #2
 800343a:	58eb      	ldr	r3, [r5, r3]
 800343c:	4798      	blx	r3
 800343e:	3601      	adds	r6, #1
 8003440:	e7ee      	b.n	8003420 <__libc_init_array+0xc>
 8003442:	00b3      	lsls	r3, r6, #2
 8003444:	58eb      	ldr	r3, [r5, r3]
 8003446:	4798      	blx	r3
 8003448:	3601      	adds	r6, #1
 800344a:	e7f2      	b.n	8003432 <__libc_init_array+0x1e>
 800344c:	08003e14 	.word	0x08003e14
 8003450:	08003e14 	.word	0x08003e14
 8003454:	08003e14 	.word	0x08003e14
 8003458:	08003e18 	.word	0x08003e18

0800345c <memset>:
 800345c:	0003      	movs	r3, r0
 800345e:	1882      	adds	r2, r0, r2
 8003460:	4293      	cmp	r3, r2
 8003462:	d100      	bne.n	8003466 <memset+0xa>
 8003464:	4770      	bx	lr
 8003466:	7019      	strb	r1, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	e7f9      	b.n	8003460 <memset+0x4>

0800346c <sniprintf>:
 800346c:	b40c      	push	{r2, r3}
 800346e:	b530      	push	{r4, r5, lr}
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <sniprintf+0x64>)
 8003472:	000c      	movs	r4, r1
 8003474:	681d      	ldr	r5, [r3, #0]
 8003476:	b09d      	sub	sp, #116	; 0x74
 8003478:	2900      	cmp	r1, #0
 800347a:	da08      	bge.n	800348e <sniprintf+0x22>
 800347c:	238b      	movs	r3, #139	; 0x8b
 800347e:	2001      	movs	r0, #1
 8003480:	602b      	str	r3, [r5, #0]
 8003482:	4240      	negs	r0, r0
 8003484:	b01d      	add	sp, #116	; 0x74
 8003486:	bc30      	pop	{r4, r5}
 8003488:	bc08      	pop	{r3}
 800348a:	b002      	add	sp, #8
 800348c:	4718      	bx	r3
 800348e:	2382      	movs	r3, #130	; 0x82
 8003490:	466a      	mov	r2, sp
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	8293      	strh	r3, [r2, #20]
 8003496:	2300      	movs	r3, #0
 8003498:	9002      	str	r0, [sp, #8]
 800349a:	9006      	str	r0, [sp, #24]
 800349c:	4299      	cmp	r1, r3
 800349e:	d000      	beq.n	80034a2 <sniprintf+0x36>
 80034a0:	1e4b      	subs	r3, r1, #1
 80034a2:	9304      	str	r3, [sp, #16]
 80034a4:	9307      	str	r3, [sp, #28]
 80034a6:	2301      	movs	r3, #1
 80034a8:	466a      	mov	r2, sp
 80034aa:	425b      	negs	r3, r3
 80034ac:	82d3      	strh	r3, [r2, #22]
 80034ae:	0028      	movs	r0, r5
 80034b0:	ab21      	add	r3, sp, #132	; 0x84
 80034b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80034b4:	a902      	add	r1, sp, #8
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	f000 f86e 	bl	8003598 <_svfiprintf_r>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	da01      	bge.n	80034c4 <sniprintf+0x58>
 80034c0:	238b      	movs	r3, #139	; 0x8b
 80034c2:	602b      	str	r3, [r5, #0]
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	d0dd      	beq.n	8003484 <sniprintf+0x18>
 80034c8:	2300      	movs	r3, #0
 80034ca:	9a02      	ldr	r2, [sp, #8]
 80034cc:	7013      	strb	r3, [r2, #0]
 80034ce:	e7d9      	b.n	8003484 <sniprintf+0x18>
 80034d0:	2000000c 	.word	0x2000000c

080034d4 <__ssputs_r>:
 80034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d6:	688e      	ldr	r6, [r1, #8]
 80034d8:	b085      	sub	sp, #20
 80034da:	0007      	movs	r7, r0
 80034dc:	000c      	movs	r4, r1
 80034de:	9203      	str	r2, [sp, #12]
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	429e      	cmp	r6, r3
 80034e4:	d83c      	bhi.n	8003560 <__ssputs_r+0x8c>
 80034e6:	2390      	movs	r3, #144	; 0x90
 80034e8:	898a      	ldrh	r2, [r1, #12]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	421a      	tst	r2, r3
 80034ee:	d034      	beq.n	800355a <__ssputs_r+0x86>
 80034f0:	6909      	ldr	r1, [r1, #16]
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	6960      	ldr	r0, [r4, #20]
 80034f6:	1a5b      	subs	r3, r3, r1
 80034f8:	9302      	str	r3, [sp, #8]
 80034fa:	2303      	movs	r3, #3
 80034fc:	4343      	muls	r3, r0
 80034fe:	0fdd      	lsrs	r5, r3, #31
 8003500:	18ed      	adds	r5, r5, r3
 8003502:	9b01      	ldr	r3, [sp, #4]
 8003504:	9802      	ldr	r0, [sp, #8]
 8003506:	3301      	adds	r3, #1
 8003508:	181b      	adds	r3, r3, r0
 800350a:	106d      	asrs	r5, r5, #1
 800350c:	42ab      	cmp	r3, r5
 800350e:	d900      	bls.n	8003512 <__ssputs_r+0x3e>
 8003510:	001d      	movs	r5, r3
 8003512:	0553      	lsls	r3, r2, #21
 8003514:	d532      	bpl.n	800357c <__ssputs_r+0xa8>
 8003516:	0029      	movs	r1, r5
 8003518:	0038      	movs	r0, r7
 800351a:	f000 fb53 	bl	8003bc4 <_malloc_r>
 800351e:	1e06      	subs	r6, r0, #0
 8003520:	d109      	bne.n	8003536 <__ssputs_r+0x62>
 8003522:	230c      	movs	r3, #12
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	2340      	movs	r3, #64	; 0x40
 8003528:	2001      	movs	r0, #1
 800352a:	89a2      	ldrh	r2, [r4, #12]
 800352c:	4240      	negs	r0, r0
 800352e:	4313      	orrs	r3, r2
 8003530:	81a3      	strh	r3, [r4, #12]
 8003532:	b005      	add	sp, #20
 8003534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003536:	9a02      	ldr	r2, [sp, #8]
 8003538:	6921      	ldr	r1, [r4, #16]
 800353a:	f000 faba 	bl	8003ab2 <memcpy>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	4a14      	ldr	r2, [pc, #80]	; (8003594 <__ssputs_r+0xc0>)
 8003542:	401a      	ands	r2, r3
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	4313      	orrs	r3, r2
 8003548:	81a3      	strh	r3, [r4, #12]
 800354a:	9b02      	ldr	r3, [sp, #8]
 800354c:	6126      	str	r6, [r4, #16]
 800354e:	18f6      	adds	r6, r6, r3
 8003550:	6026      	str	r6, [r4, #0]
 8003552:	6165      	str	r5, [r4, #20]
 8003554:	9e01      	ldr	r6, [sp, #4]
 8003556:	1aed      	subs	r5, r5, r3
 8003558:	60a5      	str	r5, [r4, #8]
 800355a:	9b01      	ldr	r3, [sp, #4]
 800355c:	429e      	cmp	r6, r3
 800355e:	d900      	bls.n	8003562 <__ssputs_r+0x8e>
 8003560:	9e01      	ldr	r6, [sp, #4]
 8003562:	0032      	movs	r2, r6
 8003564:	9903      	ldr	r1, [sp, #12]
 8003566:	6820      	ldr	r0, [r4, #0]
 8003568:	f000 faac 	bl	8003ac4 <memmove>
 800356c:	68a3      	ldr	r3, [r4, #8]
 800356e:	2000      	movs	r0, #0
 8003570:	1b9b      	subs	r3, r3, r6
 8003572:	60a3      	str	r3, [r4, #8]
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	199e      	adds	r6, r3, r6
 8003578:	6026      	str	r6, [r4, #0]
 800357a:	e7da      	b.n	8003532 <__ssputs_r+0x5e>
 800357c:	002a      	movs	r2, r5
 800357e:	0038      	movs	r0, r7
 8003580:	f000 fb96 	bl	8003cb0 <_realloc_r>
 8003584:	1e06      	subs	r6, r0, #0
 8003586:	d1e0      	bne.n	800354a <__ssputs_r+0x76>
 8003588:	0038      	movs	r0, r7
 800358a:	6921      	ldr	r1, [r4, #16]
 800358c:	f000 faae 	bl	8003aec <_free_r>
 8003590:	e7c7      	b.n	8003522 <__ssputs_r+0x4e>
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	fffffb7f 	.word	0xfffffb7f

08003598 <_svfiprintf_r>:
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	b0a1      	sub	sp, #132	; 0x84
 800359c:	9003      	str	r0, [sp, #12]
 800359e:	001d      	movs	r5, r3
 80035a0:	898b      	ldrh	r3, [r1, #12]
 80035a2:	000f      	movs	r7, r1
 80035a4:	0016      	movs	r6, r2
 80035a6:	061b      	lsls	r3, r3, #24
 80035a8:	d511      	bpl.n	80035ce <_svfiprintf_r+0x36>
 80035aa:	690b      	ldr	r3, [r1, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10e      	bne.n	80035ce <_svfiprintf_r+0x36>
 80035b0:	2140      	movs	r1, #64	; 0x40
 80035b2:	f000 fb07 	bl	8003bc4 <_malloc_r>
 80035b6:	6038      	str	r0, [r7, #0]
 80035b8:	6138      	str	r0, [r7, #16]
 80035ba:	2800      	cmp	r0, #0
 80035bc:	d105      	bne.n	80035ca <_svfiprintf_r+0x32>
 80035be:	230c      	movs	r3, #12
 80035c0:	9a03      	ldr	r2, [sp, #12]
 80035c2:	3801      	subs	r0, #1
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	b021      	add	sp, #132	; 0x84
 80035c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	2300      	movs	r3, #0
 80035d0:	ac08      	add	r4, sp, #32
 80035d2:	6163      	str	r3, [r4, #20]
 80035d4:	3320      	adds	r3, #32
 80035d6:	7663      	strb	r3, [r4, #25]
 80035d8:	3310      	adds	r3, #16
 80035da:	76a3      	strb	r3, [r4, #26]
 80035dc:	9507      	str	r5, [sp, #28]
 80035de:	0035      	movs	r5, r6
 80035e0:	782b      	ldrb	r3, [r5, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <_svfiprintf_r+0x52>
 80035e6:	2b25      	cmp	r3, #37	; 0x25
 80035e8:	d147      	bne.n	800367a <_svfiprintf_r+0xe2>
 80035ea:	1bab      	subs	r3, r5, r6
 80035ec:	9305      	str	r3, [sp, #20]
 80035ee:	42b5      	cmp	r5, r6
 80035f0:	d00c      	beq.n	800360c <_svfiprintf_r+0x74>
 80035f2:	0032      	movs	r2, r6
 80035f4:	0039      	movs	r1, r7
 80035f6:	9803      	ldr	r0, [sp, #12]
 80035f8:	f7ff ff6c 	bl	80034d4 <__ssputs_r>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d100      	bne.n	8003602 <_svfiprintf_r+0x6a>
 8003600:	e0ae      	b.n	8003760 <_svfiprintf_r+0x1c8>
 8003602:	6962      	ldr	r2, [r4, #20]
 8003604:	9b05      	ldr	r3, [sp, #20]
 8003606:	4694      	mov	ip, r2
 8003608:	4463      	add	r3, ip
 800360a:	6163      	str	r3, [r4, #20]
 800360c:	782b      	ldrb	r3, [r5, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d100      	bne.n	8003614 <_svfiprintf_r+0x7c>
 8003612:	e0a5      	b.n	8003760 <_svfiprintf_r+0x1c8>
 8003614:	2201      	movs	r2, #1
 8003616:	2300      	movs	r3, #0
 8003618:	4252      	negs	r2, r2
 800361a:	6062      	str	r2, [r4, #4]
 800361c:	a904      	add	r1, sp, #16
 800361e:	3254      	adds	r2, #84	; 0x54
 8003620:	1852      	adds	r2, r2, r1
 8003622:	1c6e      	adds	r6, r5, #1
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	60e3      	str	r3, [r4, #12]
 8003628:	60a3      	str	r3, [r4, #8]
 800362a:	7013      	strb	r3, [r2, #0]
 800362c:	65a3      	str	r3, [r4, #88]	; 0x58
 800362e:	2205      	movs	r2, #5
 8003630:	7831      	ldrb	r1, [r6, #0]
 8003632:	4854      	ldr	r0, [pc, #336]	; (8003784 <_svfiprintf_r+0x1ec>)
 8003634:	f000 fa32 	bl	8003a9c <memchr>
 8003638:	1c75      	adds	r5, r6, #1
 800363a:	2800      	cmp	r0, #0
 800363c:	d11f      	bne.n	800367e <_svfiprintf_r+0xe6>
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	06d3      	lsls	r3, r2, #27
 8003642:	d504      	bpl.n	800364e <_svfiprintf_r+0xb6>
 8003644:	2353      	movs	r3, #83	; 0x53
 8003646:	a904      	add	r1, sp, #16
 8003648:	185b      	adds	r3, r3, r1
 800364a:	2120      	movs	r1, #32
 800364c:	7019      	strb	r1, [r3, #0]
 800364e:	0713      	lsls	r3, r2, #28
 8003650:	d504      	bpl.n	800365c <_svfiprintf_r+0xc4>
 8003652:	2353      	movs	r3, #83	; 0x53
 8003654:	a904      	add	r1, sp, #16
 8003656:	185b      	adds	r3, r3, r1
 8003658:	212b      	movs	r1, #43	; 0x2b
 800365a:	7019      	strb	r1, [r3, #0]
 800365c:	7833      	ldrb	r3, [r6, #0]
 800365e:	2b2a      	cmp	r3, #42	; 0x2a
 8003660:	d016      	beq.n	8003690 <_svfiprintf_r+0xf8>
 8003662:	0035      	movs	r5, r6
 8003664:	2100      	movs	r1, #0
 8003666:	200a      	movs	r0, #10
 8003668:	68e3      	ldr	r3, [r4, #12]
 800366a:	782a      	ldrb	r2, [r5, #0]
 800366c:	1c6e      	adds	r6, r5, #1
 800366e:	3a30      	subs	r2, #48	; 0x30
 8003670:	2a09      	cmp	r2, #9
 8003672:	d94e      	bls.n	8003712 <_svfiprintf_r+0x17a>
 8003674:	2900      	cmp	r1, #0
 8003676:	d111      	bne.n	800369c <_svfiprintf_r+0x104>
 8003678:	e017      	b.n	80036aa <_svfiprintf_r+0x112>
 800367a:	3501      	adds	r5, #1
 800367c:	e7b0      	b.n	80035e0 <_svfiprintf_r+0x48>
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <_svfiprintf_r+0x1ec>)
 8003680:	6822      	ldr	r2, [r4, #0]
 8003682:	1ac0      	subs	r0, r0, r3
 8003684:	2301      	movs	r3, #1
 8003686:	4083      	lsls	r3, r0
 8003688:	4313      	orrs	r3, r2
 800368a:	002e      	movs	r6, r5
 800368c:	6023      	str	r3, [r4, #0]
 800368e:	e7ce      	b.n	800362e <_svfiprintf_r+0x96>
 8003690:	9b07      	ldr	r3, [sp, #28]
 8003692:	1d19      	adds	r1, r3, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	9107      	str	r1, [sp, #28]
 8003698:	2b00      	cmp	r3, #0
 800369a:	db01      	blt.n	80036a0 <_svfiprintf_r+0x108>
 800369c:	930b      	str	r3, [sp, #44]	; 0x2c
 800369e:	e004      	b.n	80036aa <_svfiprintf_r+0x112>
 80036a0:	425b      	negs	r3, r3
 80036a2:	60e3      	str	r3, [r4, #12]
 80036a4:	2302      	movs	r3, #2
 80036a6:	4313      	orrs	r3, r2
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	782b      	ldrb	r3, [r5, #0]
 80036ac:	2b2e      	cmp	r3, #46	; 0x2e
 80036ae:	d10a      	bne.n	80036c6 <_svfiprintf_r+0x12e>
 80036b0:	786b      	ldrb	r3, [r5, #1]
 80036b2:	2b2a      	cmp	r3, #42	; 0x2a
 80036b4:	d135      	bne.n	8003722 <_svfiprintf_r+0x18a>
 80036b6:	9b07      	ldr	r3, [sp, #28]
 80036b8:	3502      	adds	r5, #2
 80036ba:	1d1a      	adds	r2, r3, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	9207      	str	r2, [sp, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	db2b      	blt.n	800371c <_svfiprintf_r+0x184>
 80036c4:	9309      	str	r3, [sp, #36]	; 0x24
 80036c6:	4e30      	ldr	r6, [pc, #192]	; (8003788 <_svfiprintf_r+0x1f0>)
 80036c8:	2203      	movs	r2, #3
 80036ca:	0030      	movs	r0, r6
 80036cc:	7829      	ldrb	r1, [r5, #0]
 80036ce:	f000 f9e5 	bl	8003a9c <memchr>
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d006      	beq.n	80036e4 <_svfiprintf_r+0x14c>
 80036d6:	2340      	movs	r3, #64	; 0x40
 80036d8:	1b80      	subs	r0, r0, r6
 80036da:	4083      	lsls	r3, r0
 80036dc:	6822      	ldr	r2, [r4, #0]
 80036de:	3501      	adds	r5, #1
 80036e0:	4313      	orrs	r3, r2
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	7829      	ldrb	r1, [r5, #0]
 80036e6:	2206      	movs	r2, #6
 80036e8:	4828      	ldr	r0, [pc, #160]	; (800378c <_svfiprintf_r+0x1f4>)
 80036ea:	1c6e      	adds	r6, r5, #1
 80036ec:	7621      	strb	r1, [r4, #24]
 80036ee:	f000 f9d5 	bl	8003a9c <memchr>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d03c      	beq.n	8003770 <_svfiprintf_r+0x1d8>
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <_svfiprintf_r+0x1f8>)
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d125      	bne.n	8003748 <_svfiprintf_r+0x1b0>
 80036fc:	2207      	movs	r2, #7
 80036fe:	9b07      	ldr	r3, [sp, #28]
 8003700:	3307      	adds	r3, #7
 8003702:	4393      	bics	r3, r2
 8003704:	3308      	adds	r3, #8
 8003706:	9307      	str	r3, [sp, #28]
 8003708:	6963      	ldr	r3, [r4, #20]
 800370a:	9a04      	ldr	r2, [sp, #16]
 800370c:	189b      	adds	r3, r3, r2
 800370e:	6163      	str	r3, [r4, #20]
 8003710:	e765      	b.n	80035de <_svfiprintf_r+0x46>
 8003712:	4343      	muls	r3, r0
 8003714:	0035      	movs	r5, r6
 8003716:	2101      	movs	r1, #1
 8003718:	189b      	adds	r3, r3, r2
 800371a:	e7a6      	b.n	800366a <_svfiprintf_r+0xd2>
 800371c:	2301      	movs	r3, #1
 800371e:	425b      	negs	r3, r3
 8003720:	e7d0      	b.n	80036c4 <_svfiprintf_r+0x12c>
 8003722:	2300      	movs	r3, #0
 8003724:	200a      	movs	r0, #10
 8003726:	001a      	movs	r2, r3
 8003728:	3501      	adds	r5, #1
 800372a:	6063      	str	r3, [r4, #4]
 800372c:	7829      	ldrb	r1, [r5, #0]
 800372e:	1c6e      	adds	r6, r5, #1
 8003730:	3930      	subs	r1, #48	; 0x30
 8003732:	2909      	cmp	r1, #9
 8003734:	d903      	bls.n	800373e <_svfiprintf_r+0x1a6>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0c5      	beq.n	80036c6 <_svfiprintf_r+0x12e>
 800373a:	9209      	str	r2, [sp, #36]	; 0x24
 800373c:	e7c3      	b.n	80036c6 <_svfiprintf_r+0x12e>
 800373e:	4342      	muls	r2, r0
 8003740:	0035      	movs	r5, r6
 8003742:	2301      	movs	r3, #1
 8003744:	1852      	adds	r2, r2, r1
 8003746:	e7f1      	b.n	800372c <_svfiprintf_r+0x194>
 8003748:	ab07      	add	r3, sp, #28
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	003a      	movs	r2, r7
 800374e:	0021      	movs	r1, r4
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <_svfiprintf_r+0x1fc>)
 8003752:	9803      	ldr	r0, [sp, #12]
 8003754:	e000      	b.n	8003758 <_svfiprintf_r+0x1c0>
 8003756:	bf00      	nop
 8003758:	9004      	str	r0, [sp, #16]
 800375a:	9b04      	ldr	r3, [sp, #16]
 800375c:	3301      	adds	r3, #1
 800375e:	d1d3      	bne.n	8003708 <_svfiprintf_r+0x170>
 8003760:	89bb      	ldrh	r3, [r7, #12]
 8003762:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003764:	065b      	lsls	r3, r3, #25
 8003766:	d400      	bmi.n	800376a <_svfiprintf_r+0x1d2>
 8003768:	e72d      	b.n	80035c6 <_svfiprintf_r+0x2e>
 800376a:	2001      	movs	r0, #1
 800376c:	4240      	negs	r0, r0
 800376e:	e72a      	b.n	80035c6 <_svfiprintf_r+0x2e>
 8003770:	ab07      	add	r3, sp, #28
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	003a      	movs	r2, r7
 8003776:	0021      	movs	r1, r4
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <_svfiprintf_r+0x1fc>)
 800377a:	9803      	ldr	r0, [sp, #12]
 800377c:	f000 f87c 	bl	8003878 <_printf_i>
 8003780:	e7ea      	b.n	8003758 <_svfiprintf_r+0x1c0>
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	08003de0 	.word	0x08003de0
 8003788:	08003de6 	.word	0x08003de6
 800378c:	08003dea 	.word	0x08003dea
 8003790:	00000000 	.word	0x00000000
 8003794:	080034d5 	.word	0x080034d5

08003798 <_printf_common>:
 8003798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800379a:	0015      	movs	r5, r2
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	688a      	ldr	r2, [r1, #8]
 80037a0:	690b      	ldr	r3, [r1, #16]
 80037a2:	000c      	movs	r4, r1
 80037a4:	9000      	str	r0, [sp, #0]
 80037a6:	4293      	cmp	r3, r2
 80037a8:	da00      	bge.n	80037ac <_printf_common+0x14>
 80037aa:	0013      	movs	r3, r2
 80037ac:	0022      	movs	r2, r4
 80037ae:	602b      	str	r3, [r5, #0]
 80037b0:	3243      	adds	r2, #67	; 0x43
 80037b2:	7812      	ldrb	r2, [r2, #0]
 80037b4:	2a00      	cmp	r2, #0
 80037b6:	d001      	beq.n	80037bc <_printf_common+0x24>
 80037b8:	3301      	adds	r3, #1
 80037ba:	602b      	str	r3, [r5, #0]
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	069b      	lsls	r3, r3, #26
 80037c0:	d502      	bpl.n	80037c8 <_printf_common+0x30>
 80037c2:	682b      	ldr	r3, [r5, #0]
 80037c4:	3302      	adds	r3, #2
 80037c6:	602b      	str	r3, [r5, #0]
 80037c8:	6822      	ldr	r2, [r4, #0]
 80037ca:	2306      	movs	r3, #6
 80037cc:	0017      	movs	r7, r2
 80037ce:	401f      	ands	r7, r3
 80037d0:	421a      	tst	r2, r3
 80037d2:	d027      	beq.n	8003824 <_printf_common+0x8c>
 80037d4:	0023      	movs	r3, r4
 80037d6:	3343      	adds	r3, #67	; 0x43
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	1e5a      	subs	r2, r3, #1
 80037dc:	4193      	sbcs	r3, r2
 80037de:	6822      	ldr	r2, [r4, #0]
 80037e0:	0692      	lsls	r2, r2, #26
 80037e2:	d430      	bmi.n	8003846 <_printf_common+0xae>
 80037e4:	0022      	movs	r2, r4
 80037e6:	9901      	ldr	r1, [sp, #4]
 80037e8:	9800      	ldr	r0, [sp, #0]
 80037ea:	9e08      	ldr	r6, [sp, #32]
 80037ec:	3243      	adds	r2, #67	; 0x43
 80037ee:	47b0      	blx	r6
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d025      	beq.n	8003840 <_printf_common+0xa8>
 80037f4:	2306      	movs	r3, #6
 80037f6:	6820      	ldr	r0, [r4, #0]
 80037f8:	682a      	ldr	r2, [r5, #0]
 80037fa:	68e1      	ldr	r1, [r4, #12]
 80037fc:	2500      	movs	r5, #0
 80037fe:	4003      	ands	r3, r0
 8003800:	2b04      	cmp	r3, #4
 8003802:	d103      	bne.n	800380c <_printf_common+0x74>
 8003804:	1a8d      	subs	r5, r1, r2
 8003806:	43eb      	mvns	r3, r5
 8003808:	17db      	asrs	r3, r3, #31
 800380a:	401d      	ands	r5, r3
 800380c:	68a3      	ldr	r3, [r4, #8]
 800380e:	6922      	ldr	r2, [r4, #16]
 8003810:	4293      	cmp	r3, r2
 8003812:	dd01      	ble.n	8003818 <_printf_common+0x80>
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	18ed      	adds	r5, r5, r3
 8003818:	2700      	movs	r7, #0
 800381a:	42bd      	cmp	r5, r7
 800381c:	d120      	bne.n	8003860 <_printf_common+0xc8>
 800381e:	2000      	movs	r0, #0
 8003820:	e010      	b.n	8003844 <_printf_common+0xac>
 8003822:	3701      	adds	r7, #1
 8003824:	68e3      	ldr	r3, [r4, #12]
 8003826:	682a      	ldr	r2, [r5, #0]
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	42bb      	cmp	r3, r7
 800382c:	ddd2      	ble.n	80037d4 <_printf_common+0x3c>
 800382e:	0022      	movs	r2, r4
 8003830:	2301      	movs	r3, #1
 8003832:	9901      	ldr	r1, [sp, #4]
 8003834:	9800      	ldr	r0, [sp, #0]
 8003836:	9e08      	ldr	r6, [sp, #32]
 8003838:	3219      	adds	r2, #25
 800383a:	47b0      	blx	r6
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d1f0      	bne.n	8003822 <_printf_common+0x8a>
 8003840:	2001      	movs	r0, #1
 8003842:	4240      	negs	r0, r0
 8003844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003846:	2030      	movs	r0, #48	; 0x30
 8003848:	18e1      	adds	r1, r4, r3
 800384a:	3143      	adds	r1, #67	; 0x43
 800384c:	7008      	strb	r0, [r1, #0]
 800384e:	0021      	movs	r1, r4
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	3145      	adds	r1, #69	; 0x45
 8003854:	7809      	ldrb	r1, [r1, #0]
 8003856:	18a2      	adds	r2, r4, r2
 8003858:	3243      	adds	r2, #67	; 0x43
 800385a:	3302      	adds	r3, #2
 800385c:	7011      	strb	r1, [r2, #0]
 800385e:	e7c1      	b.n	80037e4 <_printf_common+0x4c>
 8003860:	0022      	movs	r2, r4
 8003862:	2301      	movs	r3, #1
 8003864:	9901      	ldr	r1, [sp, #4]
 8003866:	9800      	ldr	r0, [sp, #0]
 8003868:	9e08      	ldr	r6, [sp, #32]
 800386a:	321a      	adds	r2, #26
 800386c:	47b0      	blx	r6
 800386e:	1c43      	adds	r3, r0, #1
 8003870:	d0e6      	beq.n	8003840 <_printf_common+0xa8>
 8003872:	3701      	adds	r7, #1
 8003874:	e7d1      	b.n	800381a <_printf_common+0x82>
	...

08003878 <_printf_i>:
 8003878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387a:	b08b      	sub	sp, #44	; 0x2c
 800387c:	9206      	str	r2, [sp, #24]
 800387e:	000a      	movs	r2, r1
 8003880:	3243      	adds	r2, #67	; 0x43
 8003882:	9307      	str	r3, [sp, #28]
 8003884:	9005      	str	r0, [sp, #20]
 8003886:	9204      	str	r2, [sp, #16]
 8003888:	7e0a      	ldrb	r2, [r1, #24]
 800388a:	000c      	movs	r4, r1
 800388c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800388e:	2a78      	cmp	r2, #120	; 0x78
 8003890:	d807      	bhi.n	80038a2 <_printf_i+0x2a>
 8003892:	2a62      	cmp	r2, #98	; 0x62
 8003894:	d809      	bhi.n	80038aa <_printf_i+0x32>
 8003896:	2a00      	cmp	r2, #0
 8003898:	d100      	bne.n	800389c <_printf_i+0x24>
 800389a:	e0c1      	b.n	8003a20 <_printf_i+0x1a8>
 800389c:	2a58      	cmp	r2, #88	; 0x58
 800389e:	d100      	bne.n	80038a2 <_printf_i+0x2a>
 80038a0:	e08c      	b.n	80039bc <_printf_i+0x144>
 80038a2:	0026      	movs	r6, r4
 80038a4:	3642      	adds	r6, #66	; 0x42
 80038a6:	7032      	strb	r2, [r6, #0]
 80038a8:	e022      	b.n	80038f0 <_printf_i+0x78>
 80038aa:	0010      	movs	r0, r2
 80038ac:	3863      	subs	r0, #99	; 0x63
 80038ae:	2815      	cmp	r0, #21
 80038b0:	d8f7      	bhi.n	80038a2 <_printf_i+0x2a>
 80038b2:	f7fc fc31 	bl	8000118 <__gnu_thumb1_case_shi>
 80038b6:	0016      	.short	0x0016
 80038b8:	fff6001f 	.word	0xfff6001f
 80038bc:	fff6fff6 	.word	0xfff6fff6
 80038c0:	001ffff6 	.word	0x001ffff6
 80038c4:	fff6fff6 	.word	0xfff6fff6
 80038c8:	fff6fff6 	.word	0xfff6fff6
 80038cc:	003600a8 	.word	0x003600a8
 80038d0:	fff6009a 	.word	0xfff6009a
 80038d4:	00b9fff6 	.word	0x00b9fff6
 80038d8:	0036fff6 	.word	0x0036fff6
 80038dc:	fff6fff6 	.word	0xfff6fff6
 80038e0:	009e      	.short	0x009e
 80038e2:	0026      	movs	r6, r4
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	3642      	adds	r6, #66	; 0x42
 80038e8:	1d11      	adds	r1, r2, #4
 80038ea:	6019      	str	r1, [r3, #0]
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	7033      	strb	r3, [r6, #0]
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0a7      	b.n	8003a44 <_printf_i+0x1cc>
 80038f4:	6808      	ldr	r0, [r1, #0]
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	1d0a      	adds	r2, r1, #4
 80038fa:	0605      	lsls	r5, r0, #24
 80038fc:	d50b      	bpl.n	8003916 <_printf_i+0x9e>
 80038fe:	680d      	ldr	r5, [r1, #0]
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	2d00      	cmp	r5, #0
 8003904:	da03      	bge.n	800390e <_printf_i+0x96>
 8003906:	232d      	movs	r3, #45	; 0x2d
 8003908:	9a04      	ldr	r2, [sp, #16]
 800390a:	426d      	negs	r5, r5
 800390c:	7013      	strb	r3, [r2, #0]
 800390e:	4b61      	ldr	r3, [pc, #388]	; (8003a94 <_printf_i+0x21c>)
 8003910:	270a      	movs	r7, #10
 8003912:	9303      	str	r3, [sp, #12]
 8003914:	e01b      	b.n	800394e <_printf_i+0xd6>
 8003916:	680d      	ldr	r5, [r1, #0]
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	0641      	lsls	r1, r0, #25
 800391c:	d5f1      	bpl.n	8003902 <_printf_i+0x8a>
 800391e:	b22d      	sxth	r5, r5
 8003920:	e7ef      	b.n	8003902 <_printf_i+0x8a>
 8003922:	680d      	ldr	r5, [r1, #0]
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	1d08      	adds	r0, r1, #4
 8003928:	6018      	str	r0, [r3, #0]
 800392a:	062e      	lsls	r6, r5, #24
 800392c:	d501      	bpl.n	8003932 <_printf_i+0xba>
 800392e:	680d      	ldr	r5, [r1, #0]
 8003930:	e003      	b.n	800393a <_printf_i+0xc2>
 8003932:	066d      	lsls	r5, r5, #25
 8003934:	d5fb      	bpl.n	800392e <_printf_i+0xb6>
 8003936:	680d      	ldr	r5, [r1, #0]
 8003938:	b2ad      	uxth	r5, r5
 800393a:	4b56      	ldr	r3, [pc, #344]	; (8003a94 <_printf_i+0x21c>)
 800393c:	2708      	movs	r7, #8
 800393e:	9303      	str	r3, [sp, #12]
 8003940:	2a6f      	cmp	r2, #111	; 0x6f
 8003942:	d000      	beq.n	8003946 <_printf_i+0xce>
 8003944:	3702      	adds	r7, #2
 8003946:	0023      	movs	r3, r4
 8003948:	2200      	movs	r2, #0
 800394a:	3343      	adds	r3, #67	; 0x43
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	6863      	ldr	r3, [r4, #4]
 8003950:	60a3      	str	r3, [r4, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db03      	blt.n	800395e <_printf_i+0xe6>
 8003956:	2204      	movs	r2, #4
 8003958:	6821      	ldr	r1, [r4, #0]
 800395a:	4391      	bics	r1, r2
 800395c:	6021      	str	r1, [r4, #0]
 800395e:	2d00      	cmp	r5, #0
 8003960:	d102      	bne.n	8003968 <_printf_i+0xf0>
 8003962:	9e04      	ldr	r6, [sp, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00c      	beq.n	8003982 <_printf_i+0x10a>
 8003968:	9e04      	ldr	r6, [sp, #16]
 800396a:	0028      	movs	r0, r5
 800396c:	0039      	movs	r1, r7
 800396e:	f7fc fc63 	bl	8000238 <__aeabi_uidivmod>
 8003972:	9b03      	ldr	r3, [sp, #12]
 8003974:	3e01      	subs	r6, #1
 8003976:	5c5b      	ldrb	r3, [r3, r1]
 8003978:	7033      	strb	r3, [r6, #0]
 800397a:	002b      	movs	r3, r5
 800397c:	0005      	movs	r5, r0
 800397e:	429f      	cmp	r7, r3
 8003980:	d9f3      	bls.n	800396a <_printf_i+0xf2>
 8003982:	2f08      	cmp	r7, #8
 8003984:	d109      	bne.n	800399a <_printf_i+0x122>
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	07db      	lsls	r3, r3, #31
 800398a:	d506      	bpl.n	800399a <_printf_i+0x122>
 800398c:	6863      	ldr	r3, [r4, #4]
 800398e:	6922      	ldr	r2, [r4, #16]
 8003990:	4293      	cmp	r3, r2
 8003992:	dc02      	bgt.n	800399a <_printf_i+0x122>
 8003994:	2330      	movs	r3, #48	; 0x30
 8003996:	3e01      	subs	r6, #1
 8003998:	7033      	strb	r3, [r6, #0]
 800399a:	9b04      	ldr	r3, [sp, #16]
 800399c:	1b9b      	subs	r3, r3, r6
 800399e:	6123      	str	r3, [r4, #16]
 80039a0:	9b07      	ldr	r3, [sp, #28]
 80039a2:	0021      	movs	r1, r4
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	9805      	ldr	r0, [sp, #20]
 80039a8:	9b06      	ldr	r3, [sp, #24]
 80039aa:	aa09      	add	r2, sp, #36	; 0x24
 80039ac:	f7ff fef4 	bl	8003798 <_printf_common>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d14c      	bne.n	8003a4e <_printf_i+0x1d6>
 80039b4:	2001      	movs	r0, #1
 80039b6:	4240      	negs	r0, r0
 80039b8:	b00b      	add	sp, #44	; 0x2c
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039bc:	3145      	adds	r1, #69	; 0x45
 80039be:	700a      	strb	r2, [r1, #0]
 80039c0:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <_printf_i+0x21c>)
 80039c2:	9203      	str	r2, [sp, #12]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	6821      	ldr	r1, [r4, #0]
 80039c8:	ca20      	ldmia	r2!, {r5}
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	0608      	lsls	r0, r1, #24
 80039ce:	d516      	bpl.n	80039fe <_printf_i+0x186>
 80039d0:	07cb      	lsls	r3, r1, #31
 80039d2:	d502      	bpl.n	80039da <_printf_i+0x162>
 80039d4:	2320      	movs	r3, #32
 80039d6:	4319      	orrs	r1, r3
 80039d8:	6021      	str	r1, [r4, #0]
 80039da:	2710      	movs	r7, #16
 80039dc:	2d00      	cmp	r5, #0
 80039de:	d1b2      	bne.n	8003946 <_printf_i+0xce>
 80039e0:	2320      	movs	r3, #32
 80039e2:	6822      	ldr	r2, [r4, #0]
 80039e4:	439a      	bics	r2, r3
 80039e6:	6022      	str	r2, [r4, #0]
 80039e8:	e7ad      	b.n	8003946 <_printf_i+0xce>
 80039ea:	2220      	movs	r2, #32
 80039ec:	6809      	ldr	r1, [r1, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	6022      	str	r2, [r4, #0]
 80039f2:	0022      	movs	r2, r4
 80039f4:	2178      	movs	r1, #120	; 0x78
 80039f6:	3245      	adds	r2, #69	; 0x45
 80039f8:	7011      	strb	r1, [r2, #0]
 80039fa:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <_printf_i+0x220>)
 80039fc:	e7e1      	b.n	80039c2 <_printf_i+0x14a>
 80039fe:	0648      	lsls	r0, r1, #25
 8003a00:	d5e6      	bpl.n	80039d0 <_printf_i+0x158>
 8003a02:	b2ad      	uxth	r5, r5
 8003a04:	e7e4      	b.n	80039d0 <_printf_i+0x158>
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	680d      	ldr	r5, [r1, #0]
 8003a0a:	1d10      	adds	r0, r2, #4
 8003a0c:	6949      	ldr	r1, [r1, #20]
 8003a0e:	6018      	str	r0, [r3, #0]
 8003a10:	6813      	ldr	r3, [r2, #0]
 8003a12:	062e      	lsls	r6, r5, #24
 8003a14:	d501      	bpl.n	8003a1a <_printf_i+0x1a2>
 8003a16:	6019      	str	r1, [r3, #0]
 8003a18:	e002      	b.n	8003a20 <_printf_i+0x1a8>
 8003a1a:	066d      	lsls	r5, r5, #25
 8003a1c:	d5fb      	bpl.n	8003a16 <_printf_i+0x19e>
 8003a1e:	8019      	strh	r1, [r3, #0]
 8003a20:	2300      	movs	r3, #0
 8003a22:	9e04      	ldr	r6, [sp, #16]
 8003a24:	6123      	str	r3, [r4, #16]
 8003a26:	e7bb      	b.n	80039a0 <_printf_i+0x128>
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	1d11      	adds	r1, r2, #4
 8003a2c:	6019      	str	r1, [r3, #0]
 8003a2e:	6816      	ldr	r6, [r2, #0]
 8003a30:	2100      	movs	r1, #0
 8003a32:	0030      	movs	r0, r6
 8003a34:	6862      	ldr	r2, [r4, #4]
 8003a36:	f000 f831 	bl	8003a9c <memchr>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d001      	beq.n	8003a42 <_printf_i+0x1ca>
 8003a3e:	1b80      	subs	r0, r0, r6
 8003a40:	6060      	str	r0, [r4, #4]
 8003a42:	6863      	ldr	r3, [r4, #4]
 8003a44:	6123      	str	r3, [r4, #16]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9a04      	ldr	r2, [sp, #16]
 8003a4a:	7013      	strb	r3, [r2, #0]
 8003a4c:	e7a8      	b.n	80039a0 <_printf_i+0x128>
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	0032      	movs	r2, r6
 8003a52:	9906      	ldr	r1, [sp, #24]
 8003a54:	9805      	ldr	r0, [sp, #20]
 8003a56:	9d07      	ldr	r5, [sp, #28]
 8003a58:	47a8      	blx	r5
 8003a5a:	1c43      	adds	r3, r0, #1
 8003a5c:	d0aa      	beq.n	80039b4 <_printf_i+0x13c>
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	079b      	lsls	r3, r3, #30
 8003a62:	d415      	bmi.n	8003a90 <_printf_i+0x218>
 8003a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a66:	68e0      	ldr	r0, [r4, #12]
 8003a68:	4298      	cmp	r0, r3
 8003a6a:	daa5      	bge.n	80039b8 <_printf_i+0x140>
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	e7a3      	b.n	80039b8 <_printf_i+0x140>
 8003a70:	0022      	movs	r2, r4
 8003a72:	2301      	movs	r3, #1
 8003a74:	9906      	ldr	r1, [sp, #24]
 8003a76:	9805      	ldr	r0, [sp, #20]
 8003a78:	9e07      	ldr	r6, [sp, #28]
 8003a7a:	3219      	adds	r2, #25
 8003a7c:	47b0      	blx	r6
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	d098      	beq.n	80039b4 <_printf_i+0x13c>
 8003a82:	3501      	adds	r5, #1
 8003a84:	68e3      	ldr	r3, [r4, #12]
 8003a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	42ab      	cmp	r3, r5
 8003a8c:	dcf0      	bgt.n	8003a70 <_printf_i+0x1f8>
 8003a8e:	e7e9      	b.n	8003a64 <_printf_i+0x1ec>
 8003a90:	2500      	movs	r5, #0
 8003a92:	e7f7      	b.n	8003a84 <_printf_i+0x20c>
 8003a94:	08003df1 	.word	0x08003df1
 8003a98:	08003e02 	.word	0x08003e02

08003a9c <memchr>:
 8003a9c:	b2c9      	uxtb	r1, r1
 8003a9e:	1882      	adds	r2, r0, r2
 8003aa0:	4290      	cmp	r0, r2
 8003aa2:	d101      	bne.n	8003aa8 <memchr+0xc>
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	4770      	bx	lr
 8003aa8:	7803      	ldrb	r3, [r0, #0]
 8003aaa:	428b      	cmp	r3, r1
 8003aac:	d0fb      	beq.n	8003aa6 <memchr+0xa>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	e7f6      	b.n	8003aa0 <memchr+0x4>

08003ab2 <memcpy>:
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d100      	bne.n	8003abc <memcpy+0xa>
 8003aba:	bd10      	pop	{r4, pc}
 8003abc:	5ccc      	ldrb	r4, [r1, r3]
 8003abe:	54c4      	strb	r4, [r0, r3]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	e7f8      	b.n	8003ab6 <memcpy+0x4>

08003ac4 <memmove>:
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	4288      	cmp	r0, r1
 8003ac8:	d902      	bls.n	8003ad0 <memmove+0xc>
 8003aca:	188b      	adds	r3, r1, r2
 8003acc:	4298      	cmp	r0, r3
 8003ace:	d303      	bcc.n	8003ad8 <memmove+0x14>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e007      	b.n	8003ae4 <memmove+0x20>
 8003ad4:	5c8b      	ldrb	r3, [r1, r2]
 8003ad6:	5483      	strb	r3, [r0, r2]
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	d2fb      	bcs.n	8003ad4 <memmove+0x10>
 8003adc:	bd10      	pop	{r4, pc}
 8003ade:	5ccc      	ldrb	r4, [r1, r3]
 8003ae0:	54c4      	strb	r4, [r0, r3]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1fa      	bne.n	8003ade <memmove+0x1a>
 8003ae8:	e7f8      	b.n	8003adc <memmove+0x18>
	...

08003aec <_free_r>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	0005      	movs	r5, r0
 8003af0:	2900      	cmp	r1, #0
 8003af2:	d010      	beq.n	8003b16 <_free_r+0x2a>
 8003af4:	1f0c      	subs	r4, r1, #4
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da00      	bge.n	8003afe <_free_r+0x12>
 8003afc:	18e4      	adds	r4, r4, r3
 8003afe:	0028      	movs	r0, r5
 8003b00:	f000 f918 	bl	8003d34 <__malloc_lock>
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <_free_r+0x90>)
 8003b06:	6813      	ldr	r3, [r2, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <_free_r+0x2c>
 8003b0c:	6063      	str	r3, [r4, #4]
 8003b0e:	6014      	str	r4, [r2, #0]
 8003b10:	0028      	movs	r0, r5
 8003b12:	f000 f917 	bl	8003d44 <__malloc_unlock>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	42a3      	cmp	r3, r4
 8003b1a:	d908      	bls.n	8003b2e <_free_r+0x42>
 8003b1c:	6821      	ldr	r1, [r4, #0]
 8003b1e:	1860      	adds	r0, r4, r1
 8003b20:	4283      	cmp	r3, r0
 8003b22:	d1f3      	bne.n	8003b0c <_free_r+0x20>
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	1841      	adds	r1, r0, r1
 8003b2a:	6021      	str	r1, [r4, #0]
 8003b2c:	e7ee      	b.n	8003b0c <_free_r+0x20>
 8003b2e:	001a      	movs	r2, r3
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <_free_r+0x4e>
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	d9f9      	bls.n	8003b2e <_free_r+0x42>
 8003b3a:	6811      	ldr	r1, [r2, #0]
 8003b3c:	1850      	adds	r0, r2, r1
 8003b3e:	42a0      	cmp	r0, r4
 8003b40:	d10b      	bne.n	8003b5a <_free_r+0x6e>
 8003b42:	6820      	ldr	r0, [r4, #0]
 8003b44:	1809      	adds	r1, r1, r0
 8003b46:	1850      	adds	r0, r2, r1
 8003b48:	6011      	str	r1, [r2, #0]
 8003b4a:	4283      	cmp	r3, r0
 8003b4c:	d1e0      	bne.n	8003b10 <_free_r+0x24>
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	1841      	adds	r1, r0, r1
 8003b54:	6011      	str	r1, [r2, #0]
 8003b56:	6053      	str	r3, [r2, #4]
 8003b58:	e7da      	b.n	8003b10 <_free_r+0x24>
 8003b5a:	42a0      	cmp	r0, r4
 8003b5c:	d902      	bls.n	8003b64 <_free_r+0x78>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	602b      	str	r3, [r5, #0]
 8003b62:	e7d5      	b.n	8003b10 <_free_r+0x24>
 8003b64:	6821      	ldr	r1, [r4, #0]
 8003b66:	1860      	adds	r0, r4, r1
 8003b68:	4283      	cmp	r3, r0
 8003b6a:	d103      	bne.n	8003b74 <_free_r+0x88>
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	1841      	adds	r1, r0, r1
 8003b72:	6021      	str	r1, [r4, #0]
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	6054      	str	r4, [r2, #4]
 8003b78:	e7ca      	b.n	8003b10 <_free_r+0x24>
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	20000180 	.word	0x20000180

08003b80 <sbrk_aligned>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	4e0f      	ldr	r6, [pc, #60]	; (8003bc0 <sbrk_aligned+0x40>)
 8003b84:	000d      	movs	r5, r1
 8003b86:	6831      	ldr	r1, [r6, #0]
 8003b88:	0004      	movs	r4, r0
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	d102      	bne.n	8003b94 <sbrk_aligned+0x14>
 8003b8e:	f000 f8bf 	bl	8003d10 <_sbrk_r>
 8003b92:	6030      	str	r0, [r6, #0]
 8003b94:	0029      	movs	r1, r5
 8003b96:	0020      	movs	r0, r4
 8003b98:	f000 f8ba 	bl	8003d10 <_sbrk_r>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d00a      	beq.n	8003bb6 <sbrk_aligned+0x36>
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	1cc5      	adds	r5, r0, #3
 8003ba4:	439d      	bics	r5, r3
 8003ba6:	42a8      	cmp	r0, r5
 8003ba8:	d007      	beq.n	8003bba <sbrk_aligned+0x3a>
 8003baa:	1a29      	subs	r1, r5, r0
 8003bac:	0020      	movs	r0, r4
 8003bae:	f000 f8af 	bl	8003d10 <_sbrk_r>
 8003bb2:	1c43      	adds	r3, r0, #1
 8003bb4:	d101      	bne.n	8003bba <sbrk_aligned+0x3a>
 8003bb6:	2501      	movs	r5, #1
 8003bb8:	426d      	negs	r5, r5
 8003bba:	0028      	movs	r0, r5
 8003bbc:	bd70      	pop	{r4, r5, r6, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	20000184 	.word	0x20000184

08003bc4 <_malloc_r>:
 8003bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	1ccb      	adds	r3, r1, #3
 8003bca:	4393      	bics	r3, r2
 8003bcc:	3308      	adds	r3, #8
 8003bce:	0006      	movs	r6, r0
 8003bd0:	001f      	movs	r7, r3
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d232      	bcs.n	8003c3c <_malloc_r+0x78>
 8003bd6:	270c      	movs	r7, #12
 8003bd8:	42b9      	cmp	r1, r7
 8003bda:	d831      	bhi.n	8003c40 <_malloc_r+0x7c>
 8003bdc:	0030      	movs	r0, r6
 8003bde:	f000 f8a9 	bl	8003d34 <__malloc_lock>
 8003be2:	4d32      	ldr	r5, [pc, #200]	; (8003cac <_malloc_r+0xe8>)
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	001c      	movs	r4, r3
 8003be8:	2c00      	cmp	r4, #0
 8003bea:	d12e      	bne.n	8003c4a <_malloc_r+0x86>
 8003bec:	0039      	movs	r1, r7
 8003bee:	0030      	movs	r0, r6
 8003bf0:	f7ff ffc6 	bl	8003b80 <sbrk_aligned>
 8003bf4:	0004      	movs	r4, r0
 8003bf6:	1c43      	adds	r3, r0, #1
 8003bf8:	d11e      	bne.n	8003c38 <_malloc_r+0x74>
 8003bfa:	682c      	ldr	r4, [r5, #0]
 8003bfc:	0025      	movs	r5, r4
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	d14a      	bne.n	8003c98 <_malloc_r+0xd4>
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	0029      	movs	r1, r5
 8003c06:	18e3      	adds	r3, r4, r3
 8003c08:	0030      	movs	r0, r6
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	f000 f880 	bl	8003d10 <_sbrk_r>
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	4283      	cmp	r3, r0
 8003c14:	d143      	bne.n	8003c9e <_malloc_r+0xda>
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	3703      	adds	r7, #3
 8003c1a:	1aff      	subs	r7, r7, r3
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	439f      	bics	r7, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	2f0c      	cmp	r7, #12
 8003c24:	d200      	bcs.n	8003c28 <_malloc_r+0x64>
 8003c26:	270c      	movs	r7, #12
 8003c28:	0039      	movs	r1, r7
 8003c2a:	0030      	movs	r0, r6
 8003c2c:	f7ff ffa8 	bl	8003b80 <sbrk_aligned>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d034      	beq.n	8003c9e <_malloc_r+0xda>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	19df      	adds	r7, r3, r7
 8003c38:	6027      	str	r7, [r4, #0]
 8003c3a:	e013      	b.n	8003c64 <_malloc_r+0xa0>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	dacb      	bge.n	8003bd8 <_malloc_r+0x14>
 8003c40:	230c      	movs	r3, #12
 8003c42:	2500      	movs	r5, #0
 8003c44:	6033      	str	r3, [r6, #0]
 8003c46:	0028      	movs	r0, r5
 8003c48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	1bd1      	subs	r1, r2, r7
 8003c4e:	d420      	bmi.n	8003c92 <_malloc_r+0xce>
 8003c50:	290b      	cmp	r1, #11
 8003c52:	d917      	bls.n	8003c84 <_malloc_r+0xc0>
 8003c54:	19e2      	adds	r2, r4, r7
 8003c56:	6027      	str	r7, [r4, #0]
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	d111      	bne.n	8003c80 <_malloc_r+0xbc>
 8003c5c:	602a      	str	r2, [r5, #0]
 8003c5e:	6863      	ldr	r3, [r4, #4]
 8003c60:	6011      	str	r1, [r2, #0]
 8003c62:	6053      	str	r3, [r2, #4]
 8003c64:	0030      	movs	r0, r6
 8003c66:	0025      	movs	r5, r4
 8003c68:	f000 f86c 	bl	8003d44 <__malloc_unlock>
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	350b      	adds	r5, #11
 8003c70:	1d23      	adds	r3, r4, #4
 8003c72:	4395      	bics	r5, r2
 8003c74:	1aea      	subs	r2, r5, r3
 8003c76:	429d      	cmp	r5, r3
 8003c78:	d0e5      	beq.n	8003c46 <_malloc_r+0x82>
 8003c7a:	1b5b      	subs	r3, r3, r5
 8003c7c:	50a3      	str	r3, [r4, r2]
 8003c7e:	e7e2      	b.n	8003c46 <_malloc_r+0x82>
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	e7ec      	b.n	8003c5e <_malloc_r+0x9a>
 8003c84:	6862      	ldr	r2, [r4, #4]
 8003c86:	42a3      	cmp	r3, r4
 8003c88:	d101      	bne.n	8003c8e <_malloc_r+0xca>
 8003c8a:	602a      	str	r2, [r5, #0]
 8003c8c:	e7ea      	b.n	8003c64 <_malloc_r+0xa0>
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	e7e8      	b.n	8003c64 <_malloc_r+0xa0>
 8003c92:	0023      	movs	r3, r4
 8003c94:	6864      	ldr	r4, [r4, #4]
 8003c96:	e7a7      	b.n	8003be8 <_malloc_r+0x24>
 8003c98:	002c      	movs	r4, r5
 8003c9a:	686d      	ldr	r5, [r5, #4]
 8003c9c:	e7af      	b.n	8003bfe <_malloc_r+0x3a>
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	0030      	movs	r0, r6
 8003ca2:	6033      	str	r3, [r6, #0]
 8003ca4:	f000 f84e 	bl	8003d44 <__malloc_unlock>
 8003ca8:	e7cd      	b.n	8003c46 <_malloc_r+0x82>
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	20000180 	.word	0x20000180

08003cb0 <_realloc_r>:
 8003cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cb2:	0007      	movs	r7, r0
 8003cb4:	000e      	movs	r6, r1
 8003cb6:	0014      	movs	r4, r2
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	d105      	bne.n	8003cc8 <_realloc_r+0x18>
 8003cbc:	0011      	movs	r1, r2
 8003cbe:	f7ff ff81 	bl	8003bc4 <_malloc_r>
 8003cc2:	0005      	movs	r5, r0
 8003cc4:	0028      	movs	r0, r5
 8003cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cc8:	2a00      	cmp	r2, #0
 8003cca:	d103      	bne.n	8003cd4 <_realloc_r+0x24>
 8003ccc:	f7ff ff0e 	bl	8003aec <_free_r>
 8003cd0:	0025      	movs	r5, r4
 8003cd2:	e7f7      	b.n	8003cc4 <_realloc_r+0x14>
 8003cd4:	f000 f83e 	bl	8003d54 <_malloc_usable_size_r>
 8003cd8:	9001      	str	r0, [sp, #4]
 8003cda:	4284      	cmp	r4, r0
 8003cdc:	d803      	bhi.n	8003ce6 <_realloc_r+0x36>
 8003cde:	0035      	movs	r5, r6
 8003ce0:	0843      	lsrs	r3, r0, #1
 8003ce2:	42a3      	cmp	r3, r4
 8003ce4:	d3ee      	bcc.n	8003cc4 <_realloc_r+0x14>
 8003ce6:	0021      	movs	r1, r4
 8003ce8:	0038      	movs	r0, r7
 8003cea:	f7ff ff6b 	bl	8003bc4 <_malloc_r>
 8003cee:	1e05      	subs	r5, r0, #0
 8003cf0:	d0e8      	beq.n	8003cc4 <_realloc_r+0x14>
 8003cf2:	9b01      	ldr	r3, [sp, #4]
 8003cf4:	0022      	movs	r2, r4
 8003cf6:	429c      	cmp	r4, r3
 8003cf8:	d900      	bls.n	8003cfc <_realloc_r+0x4c>
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	0031      	movs	r1, r6
 8003cfe:	0028      	movs	r0, r5
 8003d00:	f7ff fed7 	bl	8003ab2 <memcpy>
 8003d04:	0031      	movs	r1, r6
 8003d06:	0038      	movs	r0, r7
 8003d08:	f7ff fef0 	bl	8003aec <_free_r>
 8003d0c:	e7da      	b.n	8003cc4 <_realloc_r+0x14>
	...

08003d10 <_sbrk_r>:
 8003d10:	2300      	movs	r3, #0
 8003d12:	b570      	push	{r4, r5, r6, lr}
 8003d14:	4d06      	ldr	r5, [pc, #24]	; (8003d30 <_sbrk_r+0x20>)
 8003d16:	0004      	movs	r4, r0
 8003d18:	0008      	movs	r0, r1
 8003d1a:	602b      	str	r3, [r5, #0]
 8003d1c:	f7fc fda8 	bl	8000870 <_sbrk>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	d103      	bne.n	8003d2c <_sbrk_r+0x1c>
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d000      	beq.n	8003d2c <_sbrk_r+0x1c>
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	20000188 	.word	0x20000188

08003d34 <__malloc_lock>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	4802      	ldr	r0, [pc, #8]	; (8003d40 <__malloc_lock+0xc>)
 8003d38:	f000 f814 	bl	8003d64 <__retarget_lock_acquire_recursive>
 8003d3c:	bd10      	pop	{r4, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	2000018c 	.word	0x2000018c

08003d44 <__malloc_unlock>:
 8003d44:	b510      	push	{r4, lr}
 8003d46:	4802      	ldr	r0, [pc, #8]	; (8003d50 <__malloc_unlock+0xc>)
 8003d48:	f000 f80d 	bl	8003d66 <__retarget_lock_release_recursive>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	2000018c 	.word	0x2000018c

08003d54 <_malloc_usable_size_r>:
 8003d54:	1f0b      	subs	r3, r1, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	1f18      	subs	r0, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da01      	bge.n	8003d62 <_malloc_usable_size_r+0xe>
 8003d5e:	580b      	ldr	r3, [r1, r0]
 8003d60:	18c0      	adds	r0, r0, r3
 8003d62:	4770      	bx	lr

08003d64 <__retarget_lock_acquire_recursive>:
 8003d64:	4770      	bx	lr

08003d66 <__retarget_lock_release_recursive>:
 8003d66:	4770      	bx	lr

08003d68 <_init>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr

08003d74 <_fini>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr
